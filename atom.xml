<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[The Wacul Blog]]></title>
  <link href="http://blog.wacul.co.jp/atom.xml" rel="self"/>
  <link href="http://blog.wacul.co.jp/"/>
  <updated>2015-02-11T20:09:57+09:00</updated>
  <id>http://blog.wacul.co.jp/</id>
  <author>
    <name><![CDATA[WACUL INC.]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Markdownを簡単にリアルタイムに共有するShare!をリリースしました]]></title>
    <link href="http://blog.wacul.co.jp/blog/2015/02/11/share/"/>
    <updated>2015-02-11T19:00:00+09:00</updated>
    <id>http://blog.wacul.co.jp/blog/2015/02/11/share</id>
    <content type="html"><![CDATA[<h2>はじめに</h2>

<p>最近、株式会社waculでは月に1度に開発合宿と称し、プログラマチームで業務とは別の開発を行っています。
今回ご紹介させていただく<a href="http://shareapp.wacul.jp">Share!</a>は1月、2月の開発合宿で実装したアプリケーションです。</p>

<h2>Share!とは</h2>

<p>ミーティング中に書いている議事録を参加者全体に共有したいケースがよくありました。
今までそういったケースではGoogleドライブのドキュメントを作成し、そこで共有していました。
しかし、ドキュメントでは以下のような問題がありました。</p>

<ul>
<li>普段使っているエディタを使えない</li>
<li>スタイルを整えるのが手間</li>
<li>ドキュメントを作って共有するというステップが面倒</li>
</ul>


<p>そこで我々はこれらを解決するため、ローカルで作成したMarkdown形式のテキストファイルを簡単にリアルタイムに共有するアプリケーションの開発を行いました。</p>

<h2>Share!の動作</h2>

<p>テキストを共有する側は専用のアプリケーションをダウンロードする必要があります。
アプリケーションを起動すると、以下のような画面が表示されるので、ここにテキストファイルをドラッグアンドドロップします。</p>

<p><img src="http://blog.wacul.co.jp/images/2015-02-11-share/dragdrop.png" alt="share drag and drop" /></p>

<p>そうすると、ブラウザが自動的に立ち上がり、ドラッグアンドドロップしたファイルが表示されます。</p>

<p><img src="http://blog.wacul.co.jp/images/2015-02-11-share/browser.png" alt="share browser" /></p>

<p>このとき、ユニークなランダムなURLが割り振られるので、このURLを共有したい相手に伝えます。
共有された側は共同編集を行うことはできませんが、リアルタイムに共有した側の編集状況を見ることができます。</p>

<h2>Download</h2>

<p>アプリケーションは以下からダウンロードできます。</p>

<ul>
<li>Windows版 <a href="http://blog.wacul.co.jp/zip/2015-02-11-share/share-win64.zip">Download</a></li>
<li>Mac版 <a href="http://blog.wacul.co.jp/zip/2015-02-11-share/share-osx64.zip">Download</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyMotion で 64bit アプリに対応する]]></title>
    <link href="http://blog.wacul.co.jp/blog/2014/12/17/rubymotion-64bit/"/>
    <updated>2014-12-17T17:40:00+09:00</updated>
    <id>http://blog.wacul.co.jp/blog/2014/12/17/rubymotion-64bit</id>
    <content type="html"><![CDATA[<p>こんにちは。すっかりRubyMotionでのiOSアプリ開発にどっぷりのkyohです。
最近の趣味はダイエットですが、なかなか成果が出ません。:(</p>

<h2>急に 64bit が来たので</h2>

<p>世の中、だいぶ64bit環境が普及してきたこともあり、
Appleは2015年2月から、新しいアプリの申請（更新含む）において64bit対応したアプリのみを受け付けるようになります。</p>

<p><a href="https://developer.apple.com/news/?id=10202014a">64-bit and iOS 8 Requirements for New Apps</a></p>

<p>これに合わせ、弊社サービスの「<a href="http://clulu.com/">Clulu</a>」も64bit対応を行いました。</p>

<p>およその32bit &ndash; 64bit間の差異はRubyMotionが吸収してくれる（便利！）のですが、
どうしたって一部はソース上での対応が必要です。
その最中、思わぬところで躓き、親切にもRubyMotionのContributorの方に丁寧に教えていただけたので、
簡単な解説でも書いてみようと思います。</p>

<h2>64bit対応① まずはターゲットを追加する！</h2>

<p>何はともあれ、ビルドターゲットに64bit環境を追加します。
RubyMotionの場合、Rakefileで次のように指定するだけです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">app</span><span class="o">.</span><span class="n">archs</span><span class="o">[</span><span class="s1">&#39;iPhoneOS&#39;</span><span class="o">]</span> <span class="o">&lt;&lt;</span> <span class="s1">&#39;arm64&#39;</span>
</span><span class='line'><span class="n">app</span><span class="o">.</span><span class="n">archs</span><span class="o">[</span><span class="s1">&#39;iPhoneSimulator&#39;</span><span class="o">]</span> <span class="o">&lt;&lt;</span> <span class="s1">&#39;x86_64&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>これで</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake clean
</span><span class='line'>rake
</span></code></pre></td></tr></table></div></figure>


<p>とすれば、ターゲットが追加されます。</p>

<h3>ところがどっこい。</h3>

<p>RubyMotion 2.38 までで開発ターゲットをiPadにしている場合、
<strong> iOS Simulatorが64bitモードで起動しない </strong>
というバグがありました。</p>

<p>どうやら、<code>app.archs['iPhoneSimulator'] &lt;&lt; 'x86_64'</code> としても、<code>app.archs</code> 内に <code>x86</code> が入っている限り、iOS Simulator が32bitモードで起動してしまうようです。</p>

<p>困り果ててTwitterで呟いたところ、RubyMotionのContributorの方が丁寧に教えてくれました。</p>

<blockquote class="twitter-tweet" data-conversation="none" lang="ja"><p><a href="https://twitter.com/kyoh86">@kyoh86</a> iPhoneアプリでx86_64が含まれていればシミュレータが64bitで起動するのですが、iPadでは違うということを確認しました。調査してみます。</p>&mdash; watson (@watson1978) <a href="https://twitter.com/watson1978/status/540677981249622016">2014, 12月 5</a></blockquote>


<script async src="http://blog.wacul.co.jp//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>そのため、iOS Simulatorの起動を64bitモードで起動するために環境変数の指定を追加する必要があります。</p>

<blockquote class="twitter-tweet" data-conversation="none" lang="ja"><p><a href="https://twitter.com/kyoh86">@kyoh86</a> Rakefileに&#10;ENV[‘device_name’] = ‘iPad Air’&#10;を追加する方が良かったかも。</p>&mdash; watson (@watson1978) <a href="https://twitter.com/watson1978/status/540691881256964096">2014, 12月 5</a></blockquote>


<script async src="http://blog.wacul.co.jp//platform.twitter.com/widgets.js" charset="utf-8"></script>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">app</span><span class="o">.</span><span class="n">archs</span><span class="o">[</span><span class="s1">&#39;iPhoneOS&#39;</span><span class="o">]</span> <span class="o">&lt;&lt;</span> <span class="s1">&#39;arm64&#39;</span>
</span><span class='line'><span class="n">app</span><span class="o">.</span><span class="n">archs</span><span class="o">[</span><span class="s1">&#39;iPhoneSimulator&#39;</span><span class="o">]</span> <span class="o">&lt;&lt;</span> <span class="s1">&#39;x86_64&#39;</span>
</span><span class='line'><span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;device_name&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;iPad Air&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>ただし、この不具合は最新のRubyMotion 3.0では（<a href="https://twitter.com/watson1978">@watson1978</a>さんの修正により）
Fixされているようです。</p>

<h2>64bit対応② ポインタを使用している箇所で不具合が起きないか確認する</h2>

<p>今回私が直面したのは、UIGraphics/CGContext でポインタを使った処理でのこと。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 点線を引く！</span>
</span><span class='line'><span class="n">context</span> <span class="o">=</span> <span class="no">UIGraphicsGetCurrentContext</span><span class="p">()</span>
</span><span class='line'><span class="no">UIColor</span><span class="o">.</span><span class="n">blackColor</span><span class="o">.</span><span class="n">setStroke</span>
</span><span class='line'><span class="no">CGContextSetLineWidth</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="n">lengths</span> <span class="o">=</span> <span class="no">Pointer</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:float</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="c1"># :float</span>
</span><span class='line'><span class="n">lengths</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'><span class="n">lengths</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="no">CGContextSetLineDash</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="p">,</span> <span class="n">lengths</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="no">CGContextMoveToPoint</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
</span><span class='line'><span class="no">CGContextAddLineToPoint</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="mi">200</span><span class="p">,</span> <span class="mi">200</span><span class="p">)</span>
</span><span class='line'><span class="no">CGContextStrokePath</span><span class="p">(</span><span class="n">context</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>CGFloatは、32bit環境では32bit小数点数、64bit環境では64bit小数点数となっているため、
64bit環境でこいつを動かすと、<code>CGContextSetLineDash(context, 0.0, lengths, 2)</code> のところでコケます。</p>

<p>64bit環境に対応するためには、Pointerが指すオブジェクトの型をdoubleにしてやる必要があります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">lengths</span> <span class="o">=</span> <span class="no">Pointer</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:double</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="c1"># :double</span>
</span></code></pre></td></tr></table></div></figure>


<p>どうしても64bitと32bitを両立させたい！という場合（そんなのあるのか？）は、この両者を並立させることもできます。
こちらも件の@watson1978さんから情報をいただきました。</p>

<blockquote class="twitter-tweet" data-conversation="none" lang="ja"><p><a href="https://twitter.com/kyoh86">@kyoh86</a> CGFloatは32bitと64bitでサイズが違うので <a href="https://t.co/dR2f0SdKAw">https://t.co/dR2f0SdKAw</a> みたいな感じで切り分けて適切な型でPointerを作ってください。</p>&mdash; watson (@watson1978) <a href="https://twitter.com/watson1978/status/540488987203235840">2014, 12月 4</a></blockquote>


<script async src="http://blog.wacul.co.jp//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>つまり、先の例で言えば</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">CGFloat_Type</span> <span class="o">=</span> <span class="no">CGSize</span><span class="o">.</span><span class="n">type</span><span class="o">[</span><span class="sr">/(f|d)/</span><span class="o">]</span>
</span><span class='line'><span class="n">lengths</span> <span class="o">=</span> <span class="no">Pointer</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">CGFloat_Type</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="c1"># :float/:double</span>
</span></code></pre></td></tr></table></div></figure>


<p>こんな感じですね。</p>

<h2>さいごに</h2>

<p>RubyMotionでの64bit環境対応はそう難しくはありません。
今回のような事態に巻き込まれることも極稀にあるようですが・・・。
Appleの設けた来年2月までの期限に向けて、早々に取り掛かってみるのも悪く無いと思います。</p>

<p>ともあれ、今回のトラブルで丁寧にご対応くださった上、この記事への引用をご了承くださった
<a href="https://twitter.com/watson1978/">@watson1978</a>様には厚く御礼申し上げます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sublime Text, Atomで使えるAngularJSプラグインを作りました]]></title>
    <link href="http://blog.wacul.co.jp/blog/2014/11/12/angular-plugin-for-sublime-and-atom-users/"/>
    <updated>2014-11-12T19:25:00+09:00</updated>
    <id>http://blog.wacul.co.jp/blog/2014/11/12/angular-plugin-for-sublime-and-atom-users</id>
    <content type="html"><![CDATA[<p>CoffeeScriptでAngularJSを書いている開発者、特にSublime TextやAtomを使っている人向けのプラグインを作ったので紹介します。</p>

<h2>どんなプラグイン？</h2>

<p>このプラグインは <strong>インラインテンプレートのハイライト機能</strong>を提供します(ちょっとしたスニペットもあります)。
WebStormのLanguage Injection(図2)や、Github Flavored Markdownのコード部分がハイライトされるアレの簡易版です。</p>

<p><a href="http://blog.wacul.co.jp/images/2014-11-12-angular-plugin-for-sublime-atom-users/sublime.gif"><img src="http://blog.wacul.co.jp/images/2014-11-12-angular-plugin-for-sublime-atom-users/sublime.gif" alt="sublime sample" /></a><br>
Sublime Textでのプラグイン動作例(テンプレート内での補完は<a href="https://github.com/angular-ui/AngularJS-sublime-package">angular-ui/AngularJS-sublime-package</a>が使われています)</p>

<p><a href="http://blog.wacul.co.jp/images/2014-11-12-angular-plugin-for-sublime-atom-users/webstorm.gif"><img src="http://blog.wacul.co.jp/images/2014-11-12-angular-plugin-for-sublime-atom-users/webstorm.gif" alt="webstorm sample" /></a><br>
WebStromのLanguage Injection動作例</p>

<h2>インストール</h2>

<h3>Sublime Text</h3>

<p>Package Installから <code>CoffeeAngular Syntax</code> を検索してインストールします。</p>

<p><a href="http://blog.wacul.co.jp/images/2014-11-12-angular-plugin-for-sublime-atom-users/sublime_install.gif"><img src="http://blog.wacul.co.jp/images/2014-11-12-angular-plugin-for-sublime-atom-users/sublime_install.gif" alt="sublime install sample" /></a></p>

<h3>Atom</h3>

<p>設定画面から <code>Language Coffee Script Angular</code> を検索してインストールするか、ターミナルから<code>apm install language-coffee-script-angular</code>して下さい。</p>

<p><a href="http://blog.wacul.co.jp/images/2014-11-12-angular-plugin-for-sublime-atom-users/atom_install.png"><img src="http://blog.wacul.co.jp/images/2014-11-12-angular-plugin-for-sublime-atom-users/atom_install.png" alt="atom install sample" /></a></p>

<h2>使い方(共通)</h2>

<p>言語モードにCoffeeScript (Angular.js)が追加されているのでそれを選択します。
すると以下図のようなコードのテンプレート部分がハイライトされます。</p>

<p><a href="http://blog.wacul.co.jp/images/2014-11-12-angular-plugin-for-sublime-atom-users/run.gif"><img src="http://blog.wacul.co.jp/images/2014-11-12-angular-plugin-for-sublime-atom-users/run.gif" alt="run plugin" /></a></p>

<h2>まとめ</h2>

<p>Sublime TextとAtom用のCoffeeScript+AngularJSプラグインを作りました。
結構ユーザ層が限定的ではありますがCoffeeでAngularな人は是非使ってみてください。</p>

<h2>レポジトリ</h2>

<ul>
<li><a href="https://github.com/ukyo/CoffeeAngular.tmLanguage">github.com/ukyo/CoffeeAngular.tmLanguage(Sublime)</a></li>
<li><a href="https://github.com/ukyo/language-coffee-script">github.com/ukyo/language-coffee-script(Atom)</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JSON Hyper-Schema からAPIドキュメントとGoのコードを自動生成する]]></title>
    <link href="http://blog.wacul.co.jp/blog/2014/10/28/go-rest-api/"/>
    <updated>2014-10-28T00:00:00+09:00</updated>
    <id>http://blog.wacul.co.jp/blog/2014/10/28/go-rest-api</id>
    <content type="html"><![CDATA[<h2>３行で言うと</h2>

<ul>
<li>herokuが作ってる <a href="https://github.com/interagent/prmd">prmd</a> を使って、JSON SchemaからAPIドキュメントを出力したよ！</li>
<li>スキーマ定義から、GoのAPI実装コードも出力するツールを作ったらめっちゃ捗るよ！</li>
<li>Goの<a href="https://github.com/wcl48/valval">バリデーション用のライブラリ</a>も作ったよ！</li>
</ul>


<h2>今回作ったものの概要とサンプルコード</h2>

<h3>概要</h3>

<p>以前から、APIを開発する上で、以下のようなことが課題となっていました。</p>

<ul>
<li>そもそもドキュメント書くのがつらい</li>
<li>それもあって、ドキュメントより先にコードが変わってしまう</li>
<li>ドキュメントと実装の状況の違いが把握しづらい</li>
</ul>


<p>また、ロジックがそんなに複雑ではないAPIでは、実装の作業は</p>

<ul>
<li>リクエストデータのバリデーション</li>
<li>出力データの整形 (フィルタリング)</li>
</ul>


<p>の２つの作業が大きな割合を占めます。</p>

<p>APIの定義ファイルからドキュメントと、バリデーションや出力データ整形のコードを自動生成できれば、大幅に効率が上がると思い実装してみました。</p>

<p>今回実装した仕組みの全体の処理の流れは以下の様になっています。</p>

<ul>
<li><a href="https://github.com/interagent/prmd">prmd</a> を使って、schema.json (JSON Hyper-Schemaドキュメント) を生成  <code>prmd combine</code></li>
<li>schema.json から、APIドキュメント (schema.md) を生成 <code>prmd doc</code></li>
<li>schema.json から、Goのサーバー側実装を生成 (独自実装)</li>
</ul>


<p><img src="http://blog.wacul.co.jp/images/2014-10-28-go-rest-api/overview.png" alt="概要" /></p>

<h3>サンプルコード</h3>

<p>今回の記事のサンプルコードは
<a href="https://github.com/wcl48/go-api-generation-sample">https://github.com/wcl48/go-api-generation-sample</a>
にあります。</p>

<p>サンプルプロジェクト内のディレクトリ、ファイルは以下の様な構成です</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Cakefile            # ビルドタスク定義
</span><span class='line'>README.md
</span><span class='line'>bin/                # ビルド用スクリプト
</span><span class='line'>package.json
</span><span class='line'>templates/          # 共通 go ファイル(自動生成時にパッケージ名だけ変えてコピーされる)
</span><span class='line'>test/               # テスト用のスキーマ定義
</span><span class='line'>    gen/            # 生成されたGoパッケージの出力先
</span><span class='line'>    meta.yml        # prmd メタ情報
</span><span class='line'>    overview.md     # ドキュメントのトップに挿入されるマークダウン
</span><span class='line'>    schema.json     # prmd で出力される schemaファイル
</span><span class='line'>    schema.md       # prmd で出力されるドキュメント
</span><span class='line'>    schemata/       # prmd で使うスキーマ定義
</span><span class='line'>test-build.sh       # ビルド用スクリプト</span></code></pre></td></tr></table></div></figure>


<h2>APIの定義 : JSON Hyper-Schema</h2>

<p>Rest API を定義するための仕様はいくつか世の中にあって、代表的なものとしては</p>

<ul>
<li>JSON Hyper-Schema  <a href="http://json-schema.org/">http://json-schema.org/</a></li>
<li>RAML <a href="http://raml.org/">http://raml.org/</a></li>
<li>apiblueprint <a href="http://apiblueprint.org/">http://apiblueprint.org/</a></li>
</ul>


<p>を見つけました。</p>

<p>そこそこ世の中に浸透している「JSON Schema」に対する拡張であり、関連ライブラリなども豊富なことから、今回は JSON Hyper-Schema を選択しました。</p>

<h2>ドキュメンテーション: prmd by heroku</h2>

<p><a href="https://www.heroku.com/">heroku</a> が作っている、 <a href="https://github.com/interagent/prmd">prmd</a> というツールがあります。prmd を使うと、APIの定義をファイルを分割して管理でき、JSON Hyper-Schema の生成とバリデーション、ドキュメントの生成が行えます。</p>

<p><a href="https://devcenter.heroku.com/articles/platform-api-reference">herokuのAPIドキュメント</a> もこのツールをベースに生成されているようです。  <a href="https://devcenter.heroku.com/articles/platform-api-reference#schema">元のスキーマ定義</a> も公開されています。</p>

<p>サンプルコードでは、生成されたドキュメントが、 <a href="https://github.com/wcl48/go-api-generation-sample/blob/master/test/schema.md">test/schema.md</a> にあります。 元のスキーマ定義は、 <a href="https://github.com/wcl48/go-api-generation-sample/blob/master/test/schemata/hoge.yaml">test/schemata/hoge.yaml</a>  です。</p>

<h2>どんなGoのコードを生成するか</h2>

<p>ドキュメントは無事生成できたので、次にGoのコードの生成について考えます。</p>

<p>要件としては、概ね以下のようなものとしました。</p>

<ul>
<li>利用するライブラリは、標準ライブラリの net/http と Gorilla</li>
<li>自動生成するコードは、手書きコードとパッケージレベルで分離する。

<ul>
<li>つまり、生成したコードは人の手でいじることなく、再生成が任意に実行できるように保つ</li>
</ul>
</li>
<li>対応するURLをあとで変更できる</li>
<li>リクエスト、レスポンスのオブジェクトに型つきでアクセスできる</li>
<li>リクエストオブジェクトのバリデーションを行う</li>
</ul>


<h3>リクエスト、レスポンスオブジェクトの定義</h3>

<p>リクエスト、レスポンスオブジェクトは単純に、json schemaのオブジェクト定義を、Goの構造体の定義に変換するだけです。<br/>
サンプルコード: <a href="https://github.com/wcl48/go-api-generation-sample/blob/master/test/gen/structs.go">test/gen/struct.go</a></p>

<h3>ロジックの注入</h3>

<p>APIロジック部分の実装は、自動生成されたコードにハンドラを登録する形にしました。ハンドラは次のような定義を生成しています。(サンプルでは、<code>POST /hoge</code> というAPIを定義しています)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">type</span> <span class="nx">HogePostParamDataHandler</span> <span class="kd">func</span><span class="p">(</span>
</span><span class='line'>  <span class="nx">vars</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">string</span><span class="p">,</span>        <span class="c1">// URLに含まれる、idなどのマップ</span>
</span><span class='line'>  <span class="nx">param</span> <span class="nx">HogePostParam</span><span class="p">,</span>           <span class="c1">// リクエストオブジェクト</span>
</span><span class='line'>  <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">(</span><span class="nx">Hoge</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="c1">// レスポンスオブジェクトを返す</span>
</span></code></pre></td></tr></table></div></figure>


<p>実装した関数を登録するには、次の関数を呼び出します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="nx">InjectHogePost</span><span class="p">(</span>
</span><span class='line'>  <span class="nx">router</span> <span class="o">*</span><span class="nx">mux</span><span class="p">.</span><span class="nx">Router</span><span class="p">,</span>                                 <span class="c1">// gorilla.mux のルーターオブジェクト</span>
</span><span class='line'>  <span class="nx">dh</span> <span class="nx">HogePostParamDataHandler</span><span class="p">,</span>                        <span class="c1">// ハンドラの実装</span>
</span><span class='line'>  <span class="nx">middleware</span> <span class="kd">func</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">HandlerFunc</span><span class="p">)</span> <span class="nx">http</span><span class="p">.</span><span class="nx">HandlerFunc</span><span class="p">,</span> <span class="c1">// ミドルウェア</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>サンプルコード詳細: <a href="https://github.com/wcl48/go-api-generation-sample/blob/master/test/gen/hoge.go">test/gen/hoge.go</a></p>

<h3>リクエストのバリデーション</h3>

<p>JSON Schemaには、オブジェクトのバリデーションを記述する仕様が用意されています。
( <a href="http://json-schema.org/latest/json-schema-validation.html">http://json-schema.org/latest/json-schema-validation.html</a> )
こいつら、Goのバリデーションコードを生成します。</p>

<p>オブジェクトをバリデーションするのにちょうどいいライブラリがなかったため、この部分については、バリデーションを定義するためのライブラリを作りました。</p>

<p><a href="https://github.com/wcl48/valval">wcl48/valval</a></p>

<p>特徴として</p>

<ul>
<li>バリデータの定義を使いまわせる</li>
<li>ネストしたオブジェクトもバリデーションできる</li>
<li>バリデータの中身はただの関数 ( <code>func(interface{}) error</code> )</li>
<li>構造体と、 <code>map[string]interface{}</code> の両方をバリデーションできる</li>
</ul>


<p>を備えています（実装がもうちょっと落ち着いたら別記事であげたいと思います）</p>

<p>バリデータとして、次のような感じで出力します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">var</span> <span class="nx">HogePostValidator</span> <span class="p">=</span> <span class="nx">valval</span><span class="p">.</span><span class="nx">Object</span><span class="p">(</span><span class="nx">valval</span><span class="p">.</span><span class="nx">M</span><span class="p">{</span>
</span><span class='line'>  <span class="s">&quot;Name&quot;</span><span class="p">:</span> <span class="nx">valval</span><span class="p">.</span><span class="nx">String</span><span class="p">(),</span>
</span><span class='line'>  <span class="s">&quot;Code&quot;</span><span class="p">:</span> <span class="nx">valval</span><span class="p">.</span><span class="nx">String</span><span class="p">(</span>
</span><span class='line'>      <span class="nx">valval</span><span class="p">.</span><span class="nx">MinLength</span><span class="p">(</span><span class="mi">8</span><span class="p">),</span>
</span><span class='line'>      <span class="nx">valval</span><span class="p">.</span><span class="nx">MaxLength</span><span class="p">(</span><span class="mi">16</span><span class="p">),</span>
</span><span class='line'>      <span class="nx">valval</span><span class="p">.</span><span class="nx">Regexp</span><span class="p">(</span><span class="nx">regexp</span><span class="p">.</span><span class="nx">MustCompile</span><span class="p">(</span><span class="s">`^[a-z0-9]+$`</span><span class="p">)),</span>
</span><span class='line'>  <span class="p">),</span>
</span><span class='line'>  <span class="s">&quot;Email&quot;</span><span class="p">:</span> <span class="nx">valval</span><span class="p">.</span><span class="nx">String</span><span class="p">(</span>
</span><span class='line'>      <span class="nx">validateEmail</span><span class="p">,</span>
</span><span class='line'>  <span class="p">),</span>
</span><span class='line'>    <span class="c1">// ...長いので省略</span>
</span><span class='line'><span class="p">}).</span><span class="nx">Self</span><span class="p">(</span>
</span><span class='line'>  <span class="nx">valval</span><span class="p">.</span><span class="nx">RequiredFields</span><span class="p">(</span><span class="s">&quot;Email&quot;</span><span class="p">,</span> <span class="s">&quot;Name&quot;</span><span class="p">),</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>サンプルコード: <a href="https://github.com/wcl48/go-api-generation-sample/blob/master/test/gen/validators.go">test/gen/validators.go</a></p>

<p>リクエストの中身(POSTなら r.Bodyに入っているJSON)を構造体に組み立た後、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">HogePostValidator</span><span class="p">.</span><span class="nx">Validate</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">reqData</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">SendError</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">validateError2APIError</span><span class="p">(</span><span class="nx">err</span><span class="p">))</span>
</span><span class='line'>  <span class="k">return</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>のようにして、バリデーションしています。<br/>
サンプルコード: <a href="https://github.com/wcl48/go-api-generation-sample/blob/master/test/gen/hoge.go#L57">test/gen/hoge.go</a></p>

<p>リクエストだけから判断できるエラーについては、自動生成側でバリデーションしてしまうことで、ロジック側のコード量をかなり抑えることができます。</p>

<h2>Goのコードを自動生成する時の細かいTips</h2>

<p>Goのコードを生成するときには幾つかポイントがあります。</p>

<h3>適当に出力して、 go fmt</h3>

<p>構文エラーのチェックと、フォーマットを自動でしてくれます。 改行だけ注意してコードを吐き出せばよしなにやってくれます。</p>

<h3>使わない可能性があるimportは、_に代入しておく</h3>

<p>例えば、 regexp を使う場合と使わない場合があるコードを出力するとき、import して使用していないものがあるとコンパイルエラーになります。
ちゃんとフラグ立てて出力するか、goimport など使えば綺麗になりますが、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>  <span class="s">&quot;regexp&quot;</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">_</span> <span class="p">=</span> <span class="nx">regexp</span><span class="p">.</span><span class="nx">Compile</span>
</span></code></pre></td></tr></table></div></figure>


<p>のように出力してしまえば良いです。<br/>
これは、 <a href="https://code.google.com/p/google-api-go-client/source/browse/calendar/v3/calendar-gen.go">Google APIのGoクライアントのコード</a> をみて参考にしました。</p>

<h2>まとめ</h2>

<p>JSON Hyper-Schema から、APIのドキュメンテーション、Goのソースコードを生成することで、かなり効率のよいAPIの開発ができるようになりました。<br/>
静的な型付け言語とコード自動生成の組み合わせは、生成 → コンパイル（型と実装のチェック） → 修正 というサイクルが高速で回せるため、とても強力です。</p>

<p>まだ取り組み始めたばかりなので、これからどんどん改善していきたいと思います！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SMS送信サービスのNexmoを利用する]]></title>
    <link href="http://blog.wacul.co.jp/blog/2014/10/07/nexmo/"/>
    <updated>2014-10-07T12:00:00+09:00</updated>
    <id>http://blog.wacul.co.jp/blog/2014/10/07/nexmo</id>
    <content type="html"><![CDATA[<h2>概要</h2>

<p>ユーザ登録時の本人確認や簡単な情報の通知にSMSを使うケースがあります。<br/>
今回、SMS送信サービスの<a href="https://jp.nexmo.com/">Nexmo</a>を利用してみたので紹介します。</p>

<h2>SMS送信サービス</h2>

<p><a href="https://www.google.co.jp/search?q=SMS%E9%80%81%E4%BF%A1%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9">SMS送信サービス</a>などでGoogle検索を行うと、様々なサービスが見つかります。<br/>
送るキャリアによって料金が異なったりしますが、おおよそ１通6円〜10円前後となっています。</p>

<p>今回は、Lineやカカオトークで採用されている<a href="https://jp.nexmo.com/">Nexmo</a>を利用したいと思います。
値段は2014/10/03現在、どのキャリア宛でも1通、0.0631ドルとなっています。<br/>
<img src="http://blog.wacul.co.jp/images/2014-10-07-nexmo/price.png" alt="値段" /></p>

<h2>NexmoのSMS送信APIを使用する</h2>

<p>NexmoのSMS送信APIは非常にシンプルです。
<a href="https://docs.nexmo.com/index.php/sms-api/send-message">Nexmo SMS送信APIドキュメント</a>
によると、指定されたURLにパラメータをつけてGETかPOSTをするだけで良さそうです。<br/>
その際、Nexmoに登録した際に発行されるKEY、SECRET、送信元として使用する電話番号が必要になります。</p>

<p>Node.jsでAPIを使用して送信する場合のサンプルが以下です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">request</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;request&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">request</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;https://rest.nexmo.com/sms/json&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">form</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">api_key</span><span class="o">:</span> <span class="s1">&#39;xxxxxxx&#39;</span><span class="p">,</span>     <span class="c1">//Nexmoで発行されたKEY</span>
</span><span class='line'>  <span class="nx">api_secret</span><span class="o">:</span> <span class="s1">&#39;xxxxxxxx&#39;</span><span class="p">,</span> <span class="c1">//Nexmoで発行されたSECRET</span>
</span><span class='line'>  <span class="nx">from</span><span class="o">:</span> <span class="s1">&#39;xxxxxxxxx&#39;</span><span class="p">,</span>      <span class="c1">//Nexmoで購入した電話番号</span>
</span><span class='line'>  <span class="nx">to</span><span class="o">:</span> <span class="s1">&#39;81xxxxxxxxxx&#39;</span><span class="p">,</span>     <span class="c1">//送信先電話番号。日本の場合は81で始め、先頭の0は取る。例: 09012345678なら819012345678</span>
</span><span class='line'>  <span class="nx">text</span><span class="o">:</span> <span class="s1">&#39;テスト送信。日本語もOK&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;unicode&#39;</span>         <span class="c1">//日本語を送る際は typeを unicode にする必要があります</span>
</span><span class='line'><span class="p">}},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">body</span><span class="p">){</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">err</span> <span class="o">||</span> <span class="nx">res</span><span class="p">.</span><span class="nx">statusCode</span> <span class="o">!=</span> <span class="mi">200</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;error&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//jsonでレスポンスが返ってくる</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">msg</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">body</span><span class="p">);</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">msg</span><span class="p">[</span><span class="s1">&#39;message-count&#39;</span><span class="p">];</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>    <span class="c1">//メッセージのステータスを確認する。パラメータ誤りや送信先誤りの場合、エラーとして検出される</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nx">msg</span><span class="p">.</span><span class="nx">messages</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">status</span> <span class="o">!=</span> <span class="s1">&#39;0&#39;</span><span class="p">){</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;error code:&quot;</span> <span class="o">+</span> <span class="nx">msg</span><span class="p">.</span><span class="nx">messages</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">status</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>日本語を送る際に、送信パラメータの type に unicode を指定しないといけないのが注意です。<br/>
au、ドコモ、ソフトバンク宛に試したところ、無事届くことが確認できました。</p>

<h2>まとめ</h2>

<p>今回はSMS送信サービスとして、Lineなどで利用実績のあるNexmoを利用しました。<br/>
Nexmoの提供しているSMS送信APIはシンプルで使いやすいと思います。<br/>
現在、SMSは1通数円程度かかるため、大量に送信する場合は、コストを考慮する必要があります。</p>

<h2>参考</h2>

<ul>
<li><a href="https://jp.nexmo.com/">Nexmo</a></li>
<li><a href="https://docs.nexmo.com/index.php/sms-api/send-message">Nexmo SMS送信APIドキュメント</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Markdownを複数人でリアルタイム編集できる socrates.io ]]></title>
    <link href="http://blog.wacul.co.jp/blog/2014/09/29/collaborative-realtime-markdown/"/>
    <updated>2014-09-29T22:00:00+09:00</updated>
    <id>http://blog.wacul.co.jp/blog/2014/09/29/collaborative-realtime-markdown</id>
    <content type="html"><![CDATA[<h2>Markdown ＋ リアルタイムで一緒に編集 ＝ Socrates.io</h2>

<p>こんにちは。弊社大津に勧められたウドン屋の味に、ウドン観の変わったkyohです。</p>

<p>今さら大きな声でいうことでもありませんが、プログラマー界隈では Markdown が
ドキュメントのデファクトスタンダードとなっています。</p>

<p>そんなMarkdownをリアルタイムで一緒に編集できるサービスはないものかと
色々探してみたところ、<a href="http://socrates.io/">Socrates</a> (<a href="https://github.com/segmentio/socrates">→GitHubリポジトリ</a>) というサービスが
そこそこハマったので紹介してみようと思います。</p>

<h3>Socrates のいいところ</h3>

<p>「リアルタイムでMarkdownを編集したい」という要件はほぼ満たしています。
また、リアルタイムでマークアップした結果のプレビューもしてくれるので、
微妙な記法におっかなびっくりしながら編集する目にも遭わなくて済みます。</p>

<p>Markdownの記法についても、ヘッダ、罫線、強調、リンク、画像などなど基本的なところは押さえているようです。</p>

<p><a href="http://blog.wacul.co.jp/images/2014-09-29-collaborative-realtime-markdown/screenshot_full.png"><img src="http://blog.wacul.co.jp/images/2014-09-29-collaborative-realtime-markdown/screenshot_full.png" width="440" height="384" alt="Socrates画面キャプチャ" /></a></p>

<p>また、ソースがGithubで公開されているため、cloneして試すことができます。
最近は、OSSも当たり前になってきましたね。</p>

<h3>Socrates をどう使うのか</h3>

<p>Socrates.io は、リアルタイムの共有とプレビューのみに特化した「エディタ」なので、
外部に保存したりエクスポートしたりはできません。
データは LocalStorage に保存されているので、キャッシュクリアなどをすると消えてしまいます。</p>

<p>保存については GitHub なりローカルなり、他を利用するようにして、
「一緒に編集したい」というシーンに対してここへコピー＆ペーストして使う、
というのが良い活用方法と言えるでしょう。</p>

<h3>Socrates の残念なところ（2014/09/24時点）</h3>

<p>とはいえ、このサービスにもいくらか改善の余地はありそうです。</p>

<ul>
<li><p>デフォルトのプレビュースタイルが、若干見にくい。<br/>
引用の入れ子など、ちょっと発展的なことをするとスタイリッシュじゃない。</p>

<p>Chrome 拡張の <a href="https://chrome.google.com/webstore/detail/stylish/fjnbnpbmkenffdnngjfgmeleoegfcffe?hl=ja">Stylish</a> を使って、
世に出回っている GitHub css を適用するのがベターでしょう。</p></li>
<li><p>2年間放置されてる。<br/>
・・・いつ消えてもおかしくないですね。</p></li>
<li><p>ビュー専用モード・編集専用モードに入ると、戻るリンクがない。<br/>
画面上部の「目玉」アイコンや「ペン」アイコンをクリックすると、
それぞれビュー専用／編集専用モードに入りますが、戻るリンクがない。
URL直打ちで元のページに戻るしかないのが残念。</p>

<p>こちらも前述のChrome拡張で、目玉アイコン・ペンアイコンを非表示にしちゃってます。</p></li>
</ul>


<h2>まとめ</h2>

<p>Markdown × Webサービスでリアルタイムコラボレーション、イイね！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web制作のテストサーバー運用を自動化した話]]></title>
    <link href="http://blog.wacul.co.jp/blog/2014/09/23/current-test-server/"/>
    <updated>2014-09-23T19:00:00+09:00</updated>
    <id>http://blog.wacul.co.jp/blog/2014/09/23/current-test-server</id>
    <content type="html"><![CDATA[<h2>テストサーバー運用意外と手間かかる問題</h2>

<p>ワカルでは、自社サービスを行うかたわら、お客様のWebサイト改善のお手伝いを行っています。
外部のミーティングでお客様にサイトなどの制作物を見ていただくなどのシーンも多く、認証付きで公開できるテストサーバーを運用しています。<br/>
しかし、プロジェクトごとにテストサーバーを構成するのはなかなかのコストでした。</p>

<p>そこでワカルでは、GitHubリポジトリと連携し、</p>

<ul>
<li>テスト環境の自動デプロイ</li>
<li>テストサーバーの追加の自動化</li>
</ul>


<p>といったことを行っています。</p>

<p>今回は自動化していった手順をご紹介したいと思います。<br/>
流行りの仮想化とかとはまた違う地道なお話です。</p>

<h2>利用したサービス、ミドルウェア</h2>

<p>利用した環境は以下のとおりです。</p>

<ul>
<li>ソースコード管理: github</li>
<li>インフラ: Amazon EC2, Route53, ELB</li>
<li>ミドルウェア関係: Apache, PHP, MySQL</li>
<li>自動化スクリプト: Fabric (python)</li>
</ul>


<h2>最新ソースが反映されるサーバーを構築する</h2>

<p>まずは手で効率化していくところから、徐々に自動化していきました。</p>

<h3>Apacheの設定ファイルをプロジェクトごとに書く</h3>

<p>弊社のお客様向け制作物のほとんどは、一般的なPHPの構成か、HTMLだけの静的サイトなため、単一のApache/PHPのサーバー上に、複数のVirtuslHostで環境を構築することにしました。</p>

<p>Route53(DNSサーバ) で、特定のサブドメイン以下へのアクセスをワイルドカードで全てテストサーバーへ受け付けるように設定しておきます。( 例えば、 <code>*.test.hoge.com</code> )<br/>
こうしておくと、URLもプロジェクト名をドメインに含められるため、わかりやすくなります。例：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://project-a.test.hoge.com
</span><span class='line'>http://project-b.test.hoge.com
</span><span class='line'>http://project-c.test.hoge.com</span></code></pre></td></tr></table></div></figure>


<p>プロジェクトごとに、Apacheの設定ファイルを作り、Apacheの設定からインクルードするようにしました。</p>

<p>設定ファイルの例</p>

<figure class='code'><figcaption><span>/data/vhconf.d/project-a.conf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>&lt;VirtualHost *:80&gt;
</span><span class='line'>DocumentRoot /data/repos/project-a
</span><span class='line'>ServerName http://project-a.test.hoge.com
</span><span class='line'>&lt;Directory /&gt;
</span><span class='line'>  AuthType Basic
</span><span class='line'>  AuthName &quot;Secret Zone&quot;
</span><span class='line'>  AuthUserFile /data/work/project-a.htpasswd
</span><span class='line'>  Require valid-user
</span><span class='line'>  AllowOverride All
</span><span class='line'>&lt;/Directory&gt;
</span><span class='line'>&lt;/VirtualHost&gt;
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>http.conf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Include /data/vhconf.d/*.conf
</span></code></pre></td></tr></table></div></figure>


<h3>githubと連携して、コンテンツを自動反映する</h3>

<p>github には、Web hookという仕組みがあります。 <a href="https://developer.github.com/webhooks/">参考</a><br/>
これを利用し、フックを受け付けるサーバーを立てておき、リポジトリへPushされたタイミングでテストサーバー上でPullし、コンテンツが自動的に反映されるようにしました。</p>

<h2>テスト環境自体の構築も自動化したい！</h2>

<p>上記までで、テストサーバーを公開し、特定のリポジトリへの最新のコードを自動で反映できるようになりました。<br/>
しかし、この作業を手動でやるのはとてもめんどくさく、ミスも起こりやすいです。自動化したいですね！</p>

<p>最終的に運用されているのは、以下の図のようなものです。</p>

<p><a href="http://blog.wacul.co.jp/images/2014-09-22-current-test-server/overview.png"><img src="http://blog.wacul.co.jp/images/2014-09-22-current-test-server/overview.png" alt="図" /></a></p>

<p>テストサーバー構成管理用のリポジトリを作り、各サイトの設定ファイル(json形式)をコミットするようにし、この設定用のリポジトリ自体も、githubのフックに登録し、以下の処理を行うようにしました。</p>

<ul>
<li>設定ファイルの一覧を読み込み、テストサーバー上の構成を作り直す

<ul>
<li>Apache設定ファイル・htpasswdファイルの生成</li>
<li>githubからソースコードのclone</li>
<li>githubのWebhookにテストサーバーを追加</li>
<li>Apacheの再起動</li>
</ul>
</li>
</ul>


<p>設定ファイルの例:</p>

<figure class='code'><figcaption><span>repos/abc.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;name&quot;</span><span class="o">:</span> <span class="s2">&quot;ABC社Webサイト&quot;</span><span class="p">,</span>           <span class="c1">// 名前（表示、識別用）</span>
</span><span class='line'>  <span class="s2">&quot;repositoryName&quot;</span><span class="o">:</span> <span class="s2">&quot;abc&quot;</span><span class="p">,</span>            <span class="c1">// githubリポジトリの名前</span>
</span><span class='line'>  <span class="s2">&quot;branches&quot;</span><span class="o">:</span> <span class="p">[{</span>                      <span class="c1">// テストサーバーを構築したいbranchを配列で指定</span>
</span><span class='line'>    <span class="s2">&quot;name&quot;</span><span class="o">:</span> <span class="s2">&quot;master&quot;</span><span class="p">,</span>                 <span class="c1">// branch名</span>
</span><span class='line'>    <span class="s2">&quot;sites&quot;</span><span class="o">:</span> <span class="p">[{</span>                       <span class="c1">// このブランチの中でたてたいサイトを配列で指定</span>
</span><span class='line'>      <span class="s2">&quot;documentRoot&quot;</span><span class="o">:</span> <span class="s2">&quot;html&quot;</span><span class="p">,</span>         <span class="c1">// リポジトリの中でサーバーのルートにするディレクトリ</span>
</span><span class='line'>      <span class="s2">&quot;subDomain&quot;</span><span class="o">:</span> <span class="s2">&quot;hoge&quot;</span><span class="p">,</span>            <span class="c1">// 使用したいサブドメイン この場合は hoge.abc.testserver.jp</span>
</span><span class='line'>      <span class="s2">&quot;basicAuth&quot;</span> <span class="o">:</span> <span class="kc">true</span><span class="p">,</span>             <span class="c1">// basic認証の利用</span>
</span><span class='line'>      <span class="s2">&quot;auths&quot;</span><span class="o">:</span> <span class="p">[{</span>                     <span class="c1">// 認証用のパスワードを配列で指定</span>
</span><span class='line'>         <span class="s2">&quot;user&quot;</span><span class="o">:</span> <span class="s2">&quot;abc&quot;</span><span class="p">,</span>               <span class="c1">// basic認証 ユーザー名</span>
</span><span class='line'>         <span class="s2">&quot;password&quot;</span><span class="o">:</span> <span class="s2">&quot;abcpassword&quot;</span>    <span class="c1">// basic認証 パスワード</span>
</span><span class='line'>       <span class="p">}]</span>
</span><span class='line'>     <span class="p">}]</span>
</span><span class='line'>  <span class="p">},{</span>
</span><span class='line'>    <span class="s2">&quot;name&quot;</span><span class="o">:</span> <span class="s2">&quot;develop&quot;</span><span class="p">,</span>                <span class="c1">// 以下２つめのブランチ</span>
</span><span class='line'>    <span class="s2">&quot;sites&quot;</span><span class="o">:</span> <span class="p">[{</span>
</span><span class='line'>      <span class="s2">&quot;documentRoot&quot;</span><span class="o">:</span> <span class="s2">&quot;html&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;subDomain&quot;</span><span class="o">:</span> <span class="s2">&quot;dev&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;basicAuth&quot;</span> <span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;auths&quot;</span><span class="o">:</span> <span class="p">[]</span>
</span><span class='line'>    <span class="p">}]</span>
</span><span class='line'>  <span class="p">}]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>これで、2,3分で新しいテストサーバーを構成できるようになりました！</p>

<h2>現状の構成の課題点と、今後改善したい点</h2>

<p>1年ほど運用して、特に大きな問題はなく運用できていますが、現時点で改善したいと思っている点が幾つかあります。</p>

<ul>
<li>すべて共通のApache/PHP環境を使っているので、お客様のサーバーにあわせた微妙な構成の違いを検証できない (現時点では、.htaccessで設定できることのみ対応している)</li>
<li>DBが必要な場合などは、手動で構成が必要</li>
<li>上記設定ファイルを書けるのは、なんだかんだでプログラマだけなので、依頼がくる。Webのインターフェイスとかつけて、だれでも触れるようにしたい。</li>
<li>サーバーの再構成を全てのテスト環境に対して行うので重い (実装上の手抜きの問題)</li>
</ul>


<p>現在、これらの問題を解決するために、Dockerを使って、各テスト環境をコンテナに閉じ込めて管理する方向で改善を考えています。はやりのイミュータブルインフラストラクチャってやつですね。</p>

<h2>まとめ</h2>

<p>今回はワカルで行っているWeb制作時のテスト環境構築の自動化についてご紹介しました。<br/>
管理のような仕事をどんどん効率化して減らしていかないといけません。こういった自動化がうまくはまると、プログラマ冥利に尽きるというやつですね！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cookieに効率的にデータを格納するzcookiesを作りました]]></title>
    <link href="http://blog.wacul.co.jp/blog/2014/09/16/zcookies/"/>
    <updated>2014-09-16T16:30:00+09:00</updated>
    <id>http://blog.wacul.co.jp/blog/2014/09/16/zcookies</id>
    <content type="html"><![CDATA[<p>cookieに効率的にデータを格納する<a href="https://github.com/ukyo/zcookies">zcookies</a>を作ったので使い方と仕組みについて紹介しようとおもいます。</p>

<h2>モチベーション</h2>

<p>あるとき、sessionStorageを使って一時的にデータを保存しておくようなウェブページを作っていました。
現状ではIE8以上ならsessionStorageを使うことができるので特に問題ないだろうと高をくくっていたのですが、実はsafariのプライベートブラウズモードではsessionStorage含め、Web Storage全般が使えないということがわかりました。</p>

<p>次点の解決策としてcookieを使うことを検討したのですが、いわゆる4kB制限があり作っているウェブページもその制限に引っかかる恐れがありました(特に日本語とか保存しようとすると数倍の容量を食いますからね)。</p>

<p>そこで、オブジェクトを圧縮してcookieに保存できるような仕組みを作ることにしました。</p>

<h2>使い方</h2>

<p>zcookiesの使い方は簡単です。以下の例を見て下さい。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">zcookies</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">a</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">b</span><span class="o">:</span> <span class="s1">&#39;こんにちは世界&#39;</span><span class="p">},</span> <span class="nx">options</span><span class="p">);</span>
</span><span class='line'><span class="nx">zcookies</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>zcookiesは単純なキーバリューストアとして機能します。
<code>zcookies.set</code> に <code>options</code> という引数がありますが、これはcookieを保存するときのオプションで<a href="https://github.com/ScottHamper/Cookies">ScottHamper/Cookies</a>から流用したのでそちらを参照して下さい。</p>

<h2>仕組み</h2>

<p>実際に処理してる部分が10行ちょっとなのでここに載せてみます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">global</span><span class="p">.</span><span class="nx">zcookies</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">get</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">k</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">msgpack</span><span class="p">.</span><span class="nx">unpack</span><span class="p">(</span><span class="nx">pako</span><span class="p">.</span><span class="nx">inflateRaw</span><span class="p">(</span><span class="nx">atob</span><span class="p">(</span><span class="nx">Cookies</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">k</span><span class="p">))));</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">set</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">k</span><span class="p">,</span> <span class="nx">v</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="nx">Cookies</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">k</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">cookieSizeBeforeSave</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">cookie</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">y</span> <span class="o">=</span> <span class="nx">btoa</span><span class="p">(</span><span class="nb">String</span><span class="p">.</span><span class="nx">fromCharCode</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">pako</span><span class="p">.</span><span class="nx">deflateRaw</span><span class="p">(</span><span class="nx">msgpack</span><span class="p">.</span><span class="nx">pack</span><span class="p">(</span><span class="nx">v</span><span class="p">),</span> <span class="p">{</span><span class="nx">level</span><span class="o">:</span> <span class="mi">9</span><span class="p">})));</span>
</span><span class='line'>    <span class="nx">Cookies</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">k</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">options</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">x</span> <span class="o">!==</span> <span class="nx">y</span> <span class="o">&amp;&amp;</span> <span class="nx">cookieSizeBeforeSave</span> <span class="o">===</span> <span class="nb">document</span><span class="p">.</span><span class="nx">cookie</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;zcookies: QUOTA Error!&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>ものすごく巨人の肩に乗った感じのコードですが、保存するときに</p>

<ul>
<li>JavaScriptのオブジェクトをmessagepack形式のバイト列に変換</li>
<li>deflateで圧縮</li>
<li>文字列に変換</li>
<li>base64形式に変換</li>
</ul>


<p>というような処理をしているだけです。簡単ですね。</p>

<h2>圧縮率</h2>

<p>zcookiesとescapeを使った場合で比較してみました。</p>

<table>
<thead>
<tr>
<th> テキスト </th>
<th align="right"> zcookies </th>
<th align="right"> escape</th>
</tr>
</thead>
<tbody>
<tr>
<td> こころ(1章, 1509字)    </td>
<td align="right"> 2748 </td>
<td align="right"> 9039</td>
</tr>
<tr>
<td> Alice&rsquo;s Adventures in Wonderland(上から4017字) </td>
<td align="right"> 2616 </td>
<td align="right"> 5797</td>
</tr>
</tbody>
</table>


<p>比較する対象として妥当か微妙なところですが、割りと長い文字列でもcookieの範囲に収まることが検証出来ました。</p>

<h2>まとめ</h2>

<p>すごくニッチですが、どうしてもcookieにデータを保存したいときに使えるzcookiesを作りました。
プライベートブラウズモードで困った人は是非使ってみてください。
また、最近普通にブラウザ上でmessagepackやzlib系のライブラリを使える環境が整った感があるのでこの例に限らず選択肢の一つとして頭の片隅に置いておきたいところです。</p>

<h2>参考</h2>

<ul>
<li><a href="https://github.com/ukyo/zcookies">ukyo/zcookies</a></li>
<li><a href="https://github.com/ScottHamper/Cookies">ScottHamper/Cookies</a></li>
<li><a href="https://github.com/msgpack/msgpack-javascript">msgpack/msgpack-javascript</a></li>
<li><a href="https://github.com/nodeca/pako">nodeca/pako</a></li>
<li><a href="http://browsercookielimits.x64.me/">Browser Cookie Limits</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[wacul で開発合宿を行いました]]></title>
    <link href="http://blog.wacul.co.jp/blog/2014/09/10/camp/"/>
    <updated>2014-09-10T17:00:00+09:00</updated>
    <id>http://blog.wacul.co.jp/blog/2014/09/10/camp</id>
    <content type="html"><![CDATA[<h2>合宿！</h2>

<p>wacul のプログラマーチームは、それぞれ持っている技術の範囲が少しずつ違います。<br/>
そこで、お互いがお互いの知識を補えるように、ハッカソン的なもの（wacul ハッカソン＝ワッカソン）を開いたりしてきましたが、
ついにオフィスから一歩踏み出して、開発合宿に行ってきました。</p>

<h3>合宿先</h3>

<p>wacul のメンバーは東京都内在住だったため、初めての開発合宿ということもあって極端な遠隔地は避け、静岡県の熱海に行ってきました。
泊まりといえば温泉地！夏といえば海！というのも判断材料です。</p>

<p>新幹線でおおよそ一時間半程度、片道四千円弱と、ほどよく手軽な旅程でした。</p>

<h3>滞在期間</h3>

<p>初めての合宿ということで、様子を見るためにも今回は少し短めに、1泊だけとしました。
現地に土曜日の午後入り、翌日午前中にチェックアウトだったので、いささか慌ただしくなりました。
開発合宿としては、金曜日の夜から日曜日の朝など、連泊できる方が都合がいいかと思います。</p>

<h3>宿</h3>

<p>宿は <a href="http://www.grandview-atami.com/">グランビュー熱海</a> というコンドミニアム。
今回コンドミニアムというものを初めて利用しましたが、四・五人で開発合宿をするにはとてもいい環境でした。</p>

<p>一点注意するところを挙げるとすれば、Wi-Fi対応が謳われていますが、かなり不安定で持ち込んだモバイルルータだよりになったところでしょうか。</p>

<p>6畳3部屋の2LDKでとにかくなんでも揃っています。バス・トイレ・洗面所、2口コンロ、食器類、冷蔵庫、洗濯機・・・。
独身者なら手ぶらで行ってもひと月暮らせるんじゃないか？というくらい。
宿泊施設がしっかりしていると、開発に没入できていいですね。</p>

<p>次回合宿時も、宿泊できるコンドミニアムを探してみようと思います。</p>

<h3>テーマ</h3>

<p>今回の合宿のテーマは <a href="http://golang.org">Go</a> 。
wacul の新サービス <a href="http://wacul.co.jp/pressrelease/2014/08/20/post.html">Sure!</a> でサーバーサイドに採用したこともあり、プログラマー全員で触れてみよう！というわけです。</p>

<p>皆で同じものを作る案もありましたが、各々作りたいものを作るというスタンスにしました。<br/>
全員がそこそこの粒度で言語に触れるには、良いやり方だったと思います。</p>

<h3>食事事情</h3>

<p>現地の食堂で夕飯、朝ごはんはコンドミニアムの食事でした。
観光地はなべてそうですが、熱海も夜が比較的早いので、
開発者にありがちな夜型の食事は取りにくいので注意が必要です。</p>

<h2>まとめ</h2>

<p>弊社で初めて企画した開発合宿でしたが、おかげで色々知見が得られました。</p>

<h3>良かった点</h3>

<ul>
<li>コンドミニアムは開発合宿に最適である</li>
<li>やっぱりモバイルルータが活躍した</li>
<li>裸の付き合いは親睦を深めてくれる</li>
<li>どこかノスタルジックな熱海</li>
</ul>


<h3>見直したい点</h3>

<ul>
<li>熱海は坂が多い・・・連泊するには少しキツそう</li>
<li>電源の確保がギリギリだった・・・タップを持っていったほうが良い</li>
<li>どうせVGAだろうと思って行ったら意外とHDMIだった。<br/>
必要になった時のためにモバイルプロジェクタとかあったほうがいいかも</li>
<li>どうしたって一泊は足りない。集中してものを作るなら連泊が必要</li>
<li>振り返りのためにはカメラがあったほうが良かった。写真取ろうとする意識。</li>
</ul>


<p>ともあれ、見直したい点を挙げるのも苦労するくらいにいい回だったと思います。
次回、いずれ合宿を開催した際には、また何か知見が得られれば、ここの記事に書くかもしれません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[どこの地域からアクセスされているのか、IPから検索！]]></title>
    <link href="http://blog.wacul.co.jp/blog/2014/09/01/geoip/"/>
    <updated>2014-09-01T12:00:00+09:00</updated>
    <id>http://blog.wacul.co.jp/blog/2014/09/01/geoip</id>
    <content type="html"><![CDATA[<h2>用途</h2>

<p>関東からのアクセスと九州からのアクセスでそれぞれ広告を出し分けたい、など、サイト訪問者の地域に応じたコンテンツを提供したい場合があります。
訪問者のIPアドレスからアクセス元の地域を調べることで、これを実現できます。</p>

<h2>JavaScriptによる運用</h2>

<p>JavaScriptからajaxでAPIを呼び、地域情報を取得することを考えます。</p>

<p>例えばPHPだと、自前でAPIサーバーを用意する場合は<a href="http://php.net/manual/ja/book.geoip.php">GeoIP</a> というライブラリがあるようです。</p>

<p>ですが、今回は簡単に試すため、外部のサービスを利用したいと思います。<br/>
<a href="https://www.google.co.jp/search?q=geoip+api">GeoIP API</a>などで検索するといろいろ出てきますが、
今回は<a href="http://www.telize.com/">Teliize</a>のAPIを使ってみます。<br/>
使い方は非常に簡単で、指定された<a href="http://www.telize.com/geoip">URL</a>にgetするだけで良いです。</p>

<p>例えば以下のようになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="nx">$</span><span class="p">.</span><span class="nx">getJSON</span><span class="p">(</span><span class="s2">&quot;http://www.telize.com/geoip?callback=?&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">geo</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nx">geo</span> <span class="o">&amp;&amp;</span> <span class="nx">geo</span><span class="p">.</span><span class="nx">region</span><span class="p">){</span> <span class="c1">//地域が取れない場合は、regionには何も入ってこない</span>
</span><span class='line'>      <span class="c1">//Tokyo など都道府県が入る</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">geo</span><span class="p">.</span><span class="nx">region</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>一度取得したregionはセッションストレージなどに保存しておくと、リクエスト回数が減らせて良いと思います。</p>

<h2>使用して感じた精度</h2>

<p>気になる精度ですが、概ね正しい地域が出るようです。<br/>
WIMAXを使用時に地域情報が取得できなかったり、ずれた地域になることは何度かありました。<br/>
そのため、システムに組み込むときは、その辺り考慮しておく必要があります。</p>

<h2>参考</h2>

<ul>
<li><a href="http://php.net/manual/ja/book.geoip.php">GeoIP</a></li>
<li><a href="http://www.telize.com/">Teliize</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[これからGoを始める人のためのTips集]]></title>
    <link href="http://blog.wacul.co.jp/blog/2014/08/22/go/"/>
    <updated>2014-08-22T19:00:00+09:00</updated>
    <id>http://blog.wacul.co.jp/blog/2014/08/22/go</id>
    <content type="html"><![CDATA[<p>こんにちわ。最近業務でGoを書いているのですが、3,4週間たち、だいぶ環境にも慣れてきたので、これからGoを初めようと思っている人向けにTipsを書きたいと思います。</p>

<p>間違いや改善点などあれば、 <a href="http://twitter.com/tutuming">@tutuming</a> まで教えていただけると大変ありがたいです。</p>

<h2>インストール と設定 (OSX)</h2>

<p><a href="http://golang.org/dl/">http://golang.org/dl/</a>
から、インストーラー (<code>go1.3.1.darwin-amd64-osx10.8.pkg</code> など) を選んで最新版をインストールしたら大丈夫です。自分の環境にあわせたインストーラ選んでください。</p>

<p>homebrewを使っている人は</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>brew install go
</span></code></pre></td></tr></table></div></figure>


<p>でもインストールできます。</p>

<h2><code>$GOPATH</code> とプロジェクトの作り方</h2>

<p>Go のパッケージ管理には、 <code>go get</code> コマンドを使います。<br/>
<code>go get github.com/aaa/bbb</code> とすると、 github.com/aaa/bbb で公開されているgoライブラリまたは、実行ファイルがローカルにダウンロードされます。</p>

<p>インストール後、なにも設定せずに、 <code>go get  hogehoge</code> すると、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>package github.com/davecgh/go-spew/spew: cannot download, <span class="nv">$GOPATH</span> not set. For more details see: go <span class="nb">help </span>gopath
</span></code></pre></td></tr></table></div></figure>


<p>というエラーで怒られると思います。 GOPATH を設定しろと言っていますね。<br/>
これをどこに設定するか少し迷うと思います。</p>

<h3><code>$GOPATH</code> の２つの役割</h3>

<p><code>GOPATH</code> には２つ役割があります。</p>

<ol>
<li>ビルド時のインポートパスとして、<code>GOPATH</code> に指定したすべてのディレクトリを参照する(コロン区切り)</li>
<li><code>go get</code> コマンドで外部パッケージを読み込んだ時、 <code>GOPATH</code> の先頭のディレクトリにダウンロードする</li>
</ol>


<p>そして、公式ドキュメントにもありますが、Goで自分のプロジェクトを書く時にも、このGOPATHの下で書くのが良いとされています。
例えば、自分が githubでソースコードを管理していて、ユーザー名が foo、リポジトリが bar だったら
<code>$GOPATH/src/github.com/foo/bar</code> というディレクトリを作ってそこで作業します。</p>

<p>ここで、GOPATHに一つのディレクトリを指定して作業してしまうと、サードパーティのライブラリと、自分の作ったソースコードが混ざってしまって煩雑です。</p>

<p>1, 2 の性質を考慮して、GOPATHを複数指定し</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">export </span><span class="nv">GOPATH</span><span class="o">=</span><span class="nv">$HOME</span>/go/third-party:<span class="nv">$HOME</span>/go/my-project
</span><span class='line'><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="nv">$HOME</span>/go/third-party/bin:<span class="nv">$HOME</span>/go/my-project/bin:<span class="nv">$PATH</span> <span class="c"># binをPATHに追加するのも忘れずに</span>
</span></code></pre></td></tr></table></div></figure>


<p>などとしておけば、<code>go get</code> でインストールしたライブラリは、 <code>~/go/third-party</code> にインストールし、自分のプロジェクトは、 <code>~/go/my-project</code> の下で管理できます。</p>

<p>僕はいまのところこのやり方がしっくりきています。</p>

<p>参考: <a href="http://golang.org/doc/code.html">http://golang.org/doc/code.html</a></p>

<h2><code>go-fmt</code> を使おう</h2>

<p>goには、<code>gofmt</code> という、ソースコードをコード規約に沿った形に整形するコマンドがついています。
エディタの設定で、保存時に自動で走らせるようにしておくと良いです。</p>

<p>この<code>gofmt</code>コマンドには、<code>-r</code>オプションという、ソースコードをパターンで書き換えるコマンドが用意されています。プロジェクト内の全部の関数名を変えたいときなど、リファクタリングに便利です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># -d オプションで、diffを表示してくれる</span>
</span><span class='line'><span class="nv">$ </span>gofmt -d -r <span class="s1">&#39;Zen2han -&gt; Zen2Han&#39;</span> .
</span><span class='line'>diff util/util.go gofmt/util/util.go
</span><span class='line'>--- /var/folders/cy/nds3c8y97nsb8p6l416w5__w0000gn/T/gofmt327353297     2014-08-14 19:29:31.000000000 +0900
</span><span class='line'>+++ /var/folders/cy/nds3c8y97nsb8p6l416w5__w0000gn/T/gofmt979152124     2014-08-14 19:29:31.000000000 +0900
</span><span class='line'>@@ -24,7 +24,7 @@
</span><span class='line'> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'> // 全角英数字を半角に変換する
</span><span class='line'>-func Zen2han<span class="o">(</span>src string<span class="o">)</span> string <span class="o">{</span>
</span><span class='line'>+func Zen2Han<span class="o">(</span>src string<span class="o">)</span> string <span class="o">{</span>
</span><span class='line'>        retbuf :<span class="o">=</span> make<span class="o">([]</span>rune, 0, utf8.RuneCountInString<span class="o">(</span>src<span class="o">))</span>
</span><span class='line'>        <span class="k">for </span>_, ch :<span class="o">=</span> range src <span class="o">{</span>
</span><span class='line'>                <span class="k">if </span>ch &gt;<span class="o">=</span> 0xFF21 <span class="o">&amp;&amp;</span> ch &lt;<span class="o">=</span> 0xFF3A <span class="o">{</span>
</span><span class='line'>@@ -60,5 +60,5 @@
</span><span class='line'> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'> func NormalizeStr<span class="o">(</span>src string<span class="o">)</span> string <span class="o">{</span>
</span><span class='line'>-       <span class="k">return </span>Hiragana2Katakana<span class="o">(</span>Zen2han<span class="o">(</span>src<span class="o">))</span>
</span><span class='line'>+       <span class="k">return </span>Hiragana2Katakana<span class="o">(</span>Zen2Han<span class="o">(</span>src<span class="o">))</span>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 実際に書き換えるには、 -w オプション</span>
</span><span class='line'><span class="nv">$ </span>gofmt -w -r <span class="s1">&#39;Zen2han -&gt; Zen2Han&#39;</span> .
</span></code></pre></td></tr></table></div></figure>


<p>参考: <a href="https://golang.org/cmd/gofmt/">https://golang.org/cmd/gofmt/</a></p>

<h2>その他、開発に便利なライブラリ</h2>

<h3>go-spew</h3>

<p><a href="https://github.com/davecgh/go-spew">https://github.com/davecgh/go-spew</a></p>

<p>標準パッケージの<code>fmt.Printf</code> 関数でも <code>%v</code> で構造体の中身を覗けるのですが、オブジェクトがインデントされずに１行に収まり、中身を確認しづらいです。 go-spew を使うと、もうちょっといいかんじにフォーマットしてくれます(pythonのpprintみたいな感じ)。</p>

<p>サンプル</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="s">&quot;github.com/davecgh/go-spew/spew&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">a</span> <span class="o">:=</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">A</span> <span class="p">[]</span><span class="kt">string</span>
</span><span class='line'>      <span class="nx">n</span> <span class="kt">int</span>
</span><span class='line'>  <span class="p">}{</span>
</span><span class='line'>      <span class="nx">A</span><span class="p">:</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">&quot;a&quot;</span><span class="p">,</span> <span class="s">&quot;b&quot;</span><span class="p">,</span> <span class="s">&quot;c&quot;</span><span class="p">},</span>
</span><span class='line'>      <span class="nx">n</span><span class="p">:</span> <span class="mi">123</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;--- fmt.Printf ---&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;%#v\n&quot;</span><span class="p">,</span> <span class="nx">a</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;--- spew.Dump ---&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">spew</span><span class="p">.</span><span class="nx">Dump</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>実行結果</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>--- fmt.Printf ---
</span><span class='line'>struct { A []string; n int }{A:[]string{&quot;a&quot;, &quot;b&quot;, &quot;c&quot;}, n:123}
</span><span class='line'>--- spew.Dump ---
</span><span class='line'>(struct { A []string; n int }) {
</span><span class='line'> A: ([]string) (len=3 cap=3) {
</span><span class='line'>  (string) (len=1) &quot;a&quot;,
</span><span class='line'>  (string) (len=1) &quot;b&quot;,
</span><span class='line'>  (string) (len=1) &quot;c&quot;
</span><span class='line'> },
</span><span class='line'> n: (int) 123
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<h3>goconvey</h3>

<p><a href="http://goconvey.co/  ">http://goconvey.co/  </a>
github: <a href="https://github.com/smartystreets/goconvey">https://github.com/smartystreets/goconvey</a></p>

<p>BDD支援ライブラリですが、<code>goconvey</code> コマンドを起動しておくと、ファイルの更新を検知して、ブラウザでテスト結果を出力してくれます。</p>

<p>ブラウザでの結果確認自体は、goconveyを使ってテストを書かなくても使えるので、プロジェクトの途中からでも導入しやすいですね。</p>

<p><img src="http://blog.wacul.co.jp/images/2014-08-22-go/goconvey.png" alt="" /></p>

<h2>まとめ: Go楽しいです</h2>

<p>まだ色々と試行錯誤中ですが、Go楽しいですので、やりましょう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJSのディレクティブの実行順に注意しよう]]></title>
    <link href="http://blog.wacul.co.jp/blog/2014/08/15/angular-directive-priority/"/>
    <updated>2014-08-15T16:30:00+09:00</updated>
    <id>http://blog.wacul.co.jp/blog/2014/08/15/angular-directive-priority</id>
    <content type="html"><![CDATA[<h2>TL;DR</h2>

<p>ディレクティブのコントローラー内で<code>$element.controller</code>を使って
他のコントローラーを参照するしようとして失敗したときは<code>priority</code>プロパティの値を一度確認してみよう。</p>

<h2>ディレクティブの実行順の罠</h2>

<p>AngularJSのディレクティブを作るときに何かしらの動作を与えようとする場合、
殆どのケースでは<code>link</code>プロパティを使うと思います。
しかしながら、<code>controller</code>プロパティにコントローラーを設定するケースもあるにはあります
(階層的なディレクティブを作る等々)。
コントローラーから他のコントローラーを参照するときはDIした<code>$element</code>のメソッドである<code>$element.controller</code>を使いますが
ここで何も考えずに参照しようとすると失敗することがあります。
よくあるパターンとして<a href="https://docs.angularjs.org/api/ng/type/ngModel.NgModelController">ngModelController</a>を自作のディレクティブから参照する例を見てみましょう。
以下の例ではaaa、zzzという名前のディレクティブを作ってそれらのコントローラーからngModelControllerを参照しようとしていますが
aaaの方では失敗しています。</p>

<p><a href="http://plnkr.co/edit/AmjQwx?p=preview">DEMO</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;aaa</span> <span class="na">ng-model=</span><span class="s">&quot;foo&quot;</span><span class="nt">&gt;&lt;/aaa&gt;</span>
</span><span class='line'><span class="nt">&lt;zzz</span> <span class="na">ng-model=</span><span class="s">&quot;bar&quot;</span><span class="nt">&gt;&lt;/zzz&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// アルファベット順で &lt; &quot;ngModel&quot;</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s2">&quot;aaa&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">restrict</span><span class="o">:</span> <span class="s1">&#39;E&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">replace</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">scope</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">priority</span><span class="o">:</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">template</span><span class="o">:</span> <span class="s1">&#39;&lt;div&gt;aaa hasNgModel: &lt;/div&gt;&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">controller</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">$element</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// ngModelControllerがない！</span>
</span><span class='line'>      <span class="nx">$scope</span><span class="p">.</span><span class="nx">hasNgModel</span> <span class="o">=</span> <span class="o">!!</span><span class="nx">$element</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;ngModel&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// アルファベット順で &gt; &quot;ngModel&quot;</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s2">&quot;zzz&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">restrict</span><span class="o">:</span> <span class="s1">&#39;E&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">replace</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">scope</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">template</span><span class="o">:</span> <span class="s1">&#39;&lt;div&gt;zzz hasNgModel: &lt;/div&gt;&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">controller</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">$element</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// ngModelControllerがある！</span>
</span><span class='line'>      <span class="nx">$scope</span><span class="p">.</span><span class="nx">hasNgModel</span> <span class="o">=</span> <span class="o">!!</span><span class="nx">$element</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;ngModel&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>同じ要素にディレクティブが複数登録されている場合、以下のルールで実行順が決定されます。</p>

<ol>
<li><code>priority</code>プロパティがより大きいディレクティブから実行される</li>
<li><code>priority</code>プロパティが同じ場合はアルファベット順で実行される</li>
</ol>


<p>上の例ではngModelディレクティブは<code>priority</code>が0で、新たに定義する場合もデフォルトでは0になるので、
アルファベット順でディレクティブが実行されます。
つまりディレクティブの名前がaaaだと先にそちらが実行されてしまうので、
そのコントローラー内で<code>$element.controller('ngModel')</code>として参照しようとしてもまだ存在していないことになります。
これは意図通りの挙動ではないですよね。</p>

<h2>priorityを設定しよう</h2>

<p>ディレクティブの実行順をこちら側で制御するためには<code>priority</code>プロパティに適切な数値を設定します。
ngModelディレクティブより後に実行させたいので0以下の数値を入れれば期待どおりの結果を得ることができます。</p>

<p><a href="http://plnkr.co/edit/JFtE1F?p=preview">DEMO</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s2">&quot;aaa&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">restrict</span><span class="o">:</span> <span class="s1">&#39;E&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">replace</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">scope</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">priority</span><span class="o">:</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="c1">// ここを設定する</span>
</span><span class='line'>    <span class="nx">template</span><span class="o">:</span> <span class="s1">&#39;&lt;div&gt;aaa hasNgModel: &lt;/div&gt;&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">controller</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">$element</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$scope</span><span class="p">.</span><span class="nx">hasNgModel</span> <span class="o">=</span> <span class="o">!!</span><span class="nx">$element</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;ngModel&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>まとめ</h2>

<ul>
<li><code>link</code>プロパティを使う場合はディレクティブの実行順はあまり気にしなくてもいいが、<code>controller</code>プロパティを使うときは注意する</li>
<li>同じ要素で<code>priority</code>プロパティが同じ場合はアルファベット順に実行される</li>
<li><code>priority</code>プロパティを設定することで実行順を制御することができる</li>
</ul>


<h2>参考</h2>

<ul>
<li><a href="https://docs.angularjs.org/guide/directive">AngularJS: Developer Guide: Directives</a></li>
<li><a href="https://github.com/angular/angular.js/issues/8566">$element.controller fails to get a sibling controller in a directive · Issue #8566 · angular/angular.js</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[waculではハッカソンを毎月行ってます]]></title>
    <link href="http://blog.wacul.co.jp/blog/2014/08/08/hackathon/"/>
    <updated>2014-08-08T21:00:00+09:00</updated>
    <id>http://blog.wacul.co.jp/blog/2014/08/08/hackathon</id>
    <content type="html"><![CDATA[<h2>waculのハッカソン</h2>

<p>waculのプログラマチームでは月に1回、就業時間後にハッカソンを行っています（waculのハッカソンということで、社内ではワッカソンと呼んでいます）。<br/>
社内のプログラマ4人と外部のプログラマが1人〜2人くらいで、行っています。</p>

<h2>どんなことをしているのか</h2>

<p>テーマは特に決めずに、それぞれが取り組んでいる趣味のプログラミングをするというスタイルです。<br/>
そのため、macのアプリケーションの開発をしている人もいれば、angular-jsでサービスを作っている人もいたりと、多種多様です。<br/>
また、本気で集中して開発するというよりも、最近の技術の話をしたり、実装上の悩みなど相談するなど、和気あいあいと開発をしています。</p>

<h2>プログラミング時間終了後</h2>

<p>プログラミングの時間が終了すると、その日の成果、あるいは前回のハッカソンから作ったものを紹介する時間となります。<br/>
自分が作っているものをこういった場で紹介できるというのは、モチベーションアップにつながる良い機会です。</p>

<h2>2014年8月8日の内容</h2>

<p>さて、こういったハッカソンを今日行いましたので、その報告をしたいと思います。
参加したのは我々waculのプログラマチーム4人と、外部のプログラマのIさんです。</p>

<p><img src="http://blog.wacul.co.jp/images/2014-08-08-hackathon/photo.jpg" alt="ピザを食べながらでした" /></p>

<p>それぞれどのようなことを開発し、発表したか。</p>

<ul>
<li>Iさん（外部のプログラマ）</li>
</ul>


<p>インフラ自動構築の挑戦(Chef, berkshelf)</p>

<ul>
<li>包</li>
</ul>


<p>Raspberry pi で クラウドプリントサーバの作成</p>

<ul>
<li>山田</li>
</ul>


<p>github の issueクライアント OS X アプリ開発</p>

<ul>
<li>加藤</li>
</ul>


<p>自作ツールの<a href="https://github.com/ukyo/jsziptools">jsziptools</a>のメンテナンス<br/>
言語Rustを触ってみた</p>

<ul>
<li>榎戸</li>
</ul>


<p>unityで作ったゲームの紹介
unityで物理エンジンのテストやフェードイン・アウトエフェクトについて実装</p>

<p>以上、waculでは毎月1回、ハッカソンを行っています。<br/>
もし、ご興味がありましたら、ぜひ！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TrelloとGitHubで課題管理を行うたった一つの冴えたやり方]]></title>
    <link href="http://blog.wacul.co.jp/blog/2014/08/01/trello-and-zapier/"/>
    <updated>2014-08-01T21:00:00+09:00</updated>
    <id>http://blog.wacul.co.jp/blog/2014/08/01/trello-and-zapier</id>
    <content type="html"><![CDATA[<p>こんにちわ、kyohです。</p>

<p>昨日会社のそばに引っ越して、今日から自転車通勤に切り替えましたが、さすがに暑いですね。
気づけば８月ですものね、ジーンズが張り付いてエラいコトです。</p>

<h2>課題管理に限界を感じて</h2>

<p>さて、Waculではみんなだいすき GitHub で開発作業の管理をしています。
しかし、GitHub の issues は、問題を簡潔に管理することに特化しており、進捗管理や状態管理には向いていません。
こと問題を俯瞰する立場の人から「わかりづらい」と苦情が度々ありました。</p>

<p><a href="https://docs.google.com/">Google Docs</a> での管理も考えましたが、GitHub と Docsの二重管理になってしまうこと、Docs では自由度が高すぎてやりたいことがぼやけてしまうことなどもあって、限界を感じていました。
そこで、流行りのかんばん方式でもやってみるか、と <a href="https://trello.com/">Trello</a> に手を出すに至ります。</p>

<p>管理ツールの有名ドコロでは Redmine や JIRA もありましたが、如何せん導入・撤退のコストが大きく、
少人数でさほど管理工数に余裕の無い状態では導入に踏み切れませんでした。</p>

<h2>Trello</h2>

<p><a href="https://trello.com/">Trello</a> は、よくあるカンバン方式のボード・リスト・カード管理のできるサービスです。
GitHubのAPIと連携して、コミットログなんかもカードに流してくれます。</p>

<p>適切に Trello を設定すれば、GitHubに追加された issue を自動的にTrelloに追加できるようになります。</p>

<p><img src="http://blog.wacul.co.jp/images/2014-08-01-trello-and-zapier/trello001.png" alt="GitHub の issue が次々 Trello の card になっていく・・・！" /></p>

<p>これの実現に結構苦労したので、実現方法について載せてみようと思います。</p>

<h2>Zapier</h2>

<p>GitHub と Trello の連携における一つの弱点として</p>

<ul>
<li>GitHub との連携は Post・Pull Requestのみであること</li>
</ul>


<p>があります。いくら GitHub で日頃管理しているとはいえ、非プログラマの人たちには GitHub の pull request をマージしてもらうわけにもいかないため、Pull Requestのみで運用するのには少し難があります。</p>

<p>そこで、Trello と GitHub を連携させるため、 <a href="https://zapier.com/">Zapier</a> も併用することにしました。</p>

<p><a href="https://zapier.com/">Zapier</a> は、いわゆるハブサービスです。
ハブサービスというと、<a href="https://ifttt.com/">IFTTT</a> や、一昔まえだと Yahoo! Pipes などもありましたが、
中でもかなり幅広い開発者向けツールとの連携に特化したハブサービスになっています。</p>

<h2>ちょっとした難点</h2>

<p>シルバー・ブレットは存在しないのです（言いたいだけ）。</p>

<p>この連携ではいくつか難点があります。</p>

<ul>
<li>Zapier の制限として、５分に一度だけ連携するという処理になるため、GitHub >> Trello の反映がやや遅い。</li>
<li>Zapier も Trello も、既存の Issue を取り込むすべが無いため、初期時点で GitHub に大量の Issue や Pull Request があると、Trello に初期セットアップする Card が多くて大変。</li>
<li>Zapier も Trello も追加時にはトリガされるものの、その後の編集などの追跡は行われないため、完全に同期することはできない。</li>
</ul>


<h2>メリットと難点を踏まえて</h2>

<p>Wacul では、次のように Trello を使っていこうと考えています。</p>

<ol>
<li>問題発見者は GitHub に Issue を追加する。

<ul>
<li>Issue は Trello の TODO: リストに自動的に追加される。</li>
</ul>
</li>
<li>途中の状態管理やスケジュール管理は基本的に Trello で完結させる。

<ul>
<li>GitHub は issue &ndash; ソース間の管理だけ。</li>
</ul>
</li>
<li>Trello 上で Done リストに入ったものについて、リリースする。

<ul>
<li>GitHub の Issue を close する。</li>
</ul>
</li>
</ol>


<p>まだまだ実験段階ではありますが、おおよそ悪くない管理方法に落ち着いたかな、という感がありますね。
場合によっては、最終的なDone → リリースの間にPull Requestによるやりとりを追加してもいいかもしれません。</p>

<h2>実践編</h2>

<p>実際に Trello、GitHub、Zapier の連携方法について掲載しておこうと思います。</p>

<h3>Trello と GitHub を連携させる（GitHub編）</h3>

<p>Push と Pull Request を連携させたい人は、 Trello を GitHub を直接連携させます。
Issue だけでいい！という人たちは飛ばして次の節から挑戦してください。</p>

<p>参考になった記事は<a href="http://qiita.com/ta9to/items/fc099e5153c22590a970">こちら</a>。</p>

<ol>
<li><p><strong><a href="https://trello.com/">Trello</a> / <a href="https://github.com/">GitHub</a> にログインしておく。</strong><br/>
 途中で GitHub &ndash; Trello 間を行き来するため、両サービスにログインした状態で作業したほうがわかりやすいです。</p></li>
<li><p>GitHub のリポジトリの設定画面へ<br/>
 foo のリポジトリ bar なら、URLはこんな感じ。
 <a href="https://github.com/foo/bar/settings">https://github.com/foo/bar/settings</a></p></li>
<li><p>Web Hooks &amp; Services > Add Service Hooks > Trello を選択<br/>
 <img src="http://blog.wacul.co.jp/images/2014-08-01-trello-and-zapier/github-to-trello001.png" alt="設定ページの左上にある「Web Hooks &amp; Services」を選択する" /><br/>
 <img src="http://blog.wacul.co.jp/images/2014-08-01-trello-and-zapier/github-to-trello002.png" alt="下段の「Services」から、「Add service」を選択して&quot;Trello&quot;を選択する" /></p></li>
<li><p>リストID取得のためのURL(<strong>A</strong>)をコピーしておく。<br/>
 説明文中段のURLをコピーしておきます。
 <img src="http://blog.wacul.co.jp/images/2014-08-01-trello-and-zapier/github-to-trello007.png" alt="URLをコピーしておく" /></p></li>
<li><p>Create a Customer token から、Trello へのアクセストークンを取得する<br/>
 <img src="http://blog.wacul.co.jp/images/2014-08-01-trello-and-zapier/github-to-trello003.png" alt="説明文上段の中にあるリンク「Create a customer token」を選択する" /><br/>
 <img src="http://blog.wacul.co.jp/images/2014-08-01-trello-and-zapier/github-to-trello004.png" alt="「Allow」を選択する" /><br/>
 <img src="http://blog.wacul.co.jp/images/2014-08-01-trello-and-zapier/github-to-trello005.png" alt="トークン情報が表示される" /><br/>
 表示されたトークン(<strong>B</strong>)をコピーしておきます。</p></li>
<li><p>Trello を開いて、Dashboard から「GitHub と連携させたい Board」を選択します。<br/>
 <img src="http://blog.wacul.co.jp/images/2014-08-01-trello-and-zapier/github-to-trello006.png" alt="今回は例としてWelcome boardを選択します" /></p></li>
<li><p>表示された Board のURLを確認して、Board ID(<strong>C</strong>)を特定します。<br/>
 Board の URL は、
 <code>https://trello.com/b/BoardのID/(Board 名)</code>
 という形式になっています。</p></li>
<li><p><strong>A, B, C</strong>の３つを組み合わせたURLにアクセスします。<br/>
 JSON形式で、Board内に含まれるリストの</p>

<ul>
<li>リスト名</li>
<li>リストID</li>
</ul>


<p> が取得されるので、それぞれ <strong>Push を管理するリスト</strong> と <strong>Pull Request を管理するリスト</strong> の２つのIDを取得しておきます。
 <img src="http://blog.wacul.co.jp/images/2014-08-01-trello-and-zapier/github-to-trello008.png" alt="リストIDとリスト名が表示されるので、必要なリスト名から対応するリストIDを取得する" /></p></li>
<li><p>それぞれ Push List, Pull Request List に先のIDを入力し、Consumer Token 欄にも取得したトークンを入力して「Add service」を選択します。<br/>
 <img src="http://blog.wacul.co.jp/images/2014-08-01-trello-and-zapier/github-to-trello009.png" alt="" /></p></li>
<li><p>お疲れ様です。
 <img src="http://blog.wacul.co.jp/images/2014-08-01-trello-and-zapier/github-to-trello010.png" alt="お疲れ様です" /></p></li>
</ol>


<h3>Trello と GitHub を連携させる（Zapier編）</h3>

<ol>
<li><p><a href="https://zapier.com/">Zapier</a> の Dashboard で、「Make a New Zap」を選択します。<br/>
 <img src="http://blog.wacul.co.jp/images/2014-08-01-trello-and-zapier/zapier001.png" alt="" /></p></li>
<li><p>左側の Choose a Trigger app&hellip; で GitHub を選択、右側の Choose an Action app&hellip; で Trello を選択します。<br/>
 <img src="http://blog.wacul.co.jp/images/2014-08-01-trello-and-zapier/zapier002.png" alt="" /></p></li>
<li><p>下に追加された Choose a Trigger&hellip; で New Issue を選択、右側の Choose an Action&hellip; で Create Card を選択します。<br/>
 <img src="http://blog.wacul.co.jp/images/2014-08-01-trello-and-zapier/zapier003.png" alt="" /></p></li>
<li><p>Continue を選択します。</p></li>
<li><p>Select a Github account と表示されるので、Connect a GitHub を選択します。<br/>
 <img src="http://blog.wacul.co.jp/images/2014-08-01-trello-and-zapier/zapier004.png" alt="" /></p></li>
<li><p>Zapier に登録するアカウント名を入力するダイアログが表示されますが、デフォルトのままで「Continue」を選択して大丈夫です。<br/>
 <img src="http://blog.wacul.co.jp/images/2014-08-01-trello-and-zapier/zapier005.png" alt="" /></p></li>
<li><p>GitHub の承認ページが開くので、Authorize Application としてZapierを承認しましょう。<br/>
 <img src="http://blog.wacul.co.jp/images/2014-08-01-trello-and-zapier/zapier006.png" alt="" /></p></li>
<li><p>GitHub で承認に成功すると、Zapierのページに戻って「Continue」が選択できるようになります。<br/>
 <img src="http://blog.wacul.co.jp/images/2014-08-01-trello-and-zapier/zapier007.png" alt="" /></p></li>
<li><p>Select a Trello account と表示されるので、Connect a Trello を選択します。<br/>
 <img src="http://blog.wacul.co.jp/images/2014-08-01-trello-and-zapier/zapier008.png" alt="" /></p></li>
<li><p>GitHub と同じ流れなので中略&hellip;</p></li>
<li><p>GitHub のリポジトリを選択する画面が表示されるので、1.リポジトリのオーナー と 2.リポジトリ名 を選択して Continue を選択します。<br/>
 <img src="http://blog.wacul.co.jp/images/2014-08-01-trello-and-zapier/zapier009.png" alt="" /></p></li>
<li><p>Trello に作成する Card の中身を指定できる画面が表示されるので、適当に内容を入力します。<br/>
 内容に GitHub の値を連携したい場合は、各入力欄の右側に置かれた「Insert Fields」を選択し、適当なフィールドを選択して Continue を選択します。<br/>
 <img src="http://blog.wacul.co.jp/images/2014-08-01-trello-and-zapier/zapier010.png" alt="" /></p></li>
<li><p>Test this appという項目が追加されるので、Test Github trigger を選択します。<br/>
 <img src="http://blog.wacul.co.jp/images/2014-08-01-trello-and-zapier/zapier011.png" alt="" /></p></li>
<li><p>次の図のようなダイアログが表示されるので、<strong>ダイアログを閉じずに</strong> 指定したリポジトリに issue を追加します。
 <img src="http://blog.wacul.co.jp/images/2014-08-01-trello-and-zapier/zapier012.png" alt="" /></p></li>
<li><p>issue が追加できたら、ダイアログ内の「OK, I did this」「Get Issues」「All done!」を順に選択します。</p></li>
<li><p>ダイアログが自動的に閉じるので、Continue を選択します。</p></li>
<li><p>Zap （こういう Trigger と Action の組み合わせを Zapier では「Zap」と呼びます。）に名前をつけて、Turn Zap On を選択すれば、出来上がりです。
 <img src="http://blog.wacul.co.jp/images/2014-08-01-trello-and-zapier/zapier013.png" alt="" /></p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Amazon Web Service ELB 謎のヘルスチェックエラー]]></title>
    <link href="http://blog.wacul.co.jp/blog/2014/07/24/elb/"/>
    <updated>2014-07-24T16:00:00+09:00</updated>
    <id>http://blog.wacul.co.jp/blog/2014/07/24/elb</id>
    <content type="html"><![CDATA[<p>こんにちわ。ワカルでは、サービスの運営などに<a href="http://aws.amazon.com/jp/">Amazon Web Service</a>を利用しています。</p>

<p>先日、インスタンスは正常なのに、ELBのヘルスチェックがうまく動かなくなる現象に遭遇しました。<br/>
結果的に、ELBを同じ構成で作りなおしたところ直ったのですが、根本的な原因がわからないままなので、ログとして残しておこうと思います。<br/>
もし原因がわかったら追記します。</p>

<h2>起こったこと</h2>

<p>今回問題が起こった構成は、以下のようなものです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ELB -&gt; Nginx -&gt; Node.jsアプリ</span></code></pre></td></tr></table></div></figure>


<p>WebからのリクエストをELBでEC2インスタンス上のNginxに渡し、Nginxのリバースプロキシで、静的ファイル以外を Node.jsのアプリに振り分けます。</p>

<p>この構成で構築後３日ほどすると、サーバーへのリクエストが504(Gateway Timeout) を返すようになりました。
そしてしばらくすると、ヘルスチェックがOut of Service になり時間が経つと戻る、といった挙動を繰り返します。</p>

<p><img src="http://blog.wacul.co.jp/images/2014-07-23-elb/graph_capture.png" alt="elb" /></p>

<p>(参考): CloudWatchの死活監視グラフ</p>

<h2>原因調査</h2>

<p><a href="http://docs.aws.amazon.com/ja_jp/ElasticLoadBalancing/latest/DeveloperGuide/ts-elb-error-message.html">ELBのエラーコード説明ページ</a></p>

<p>上記ページによると、504が返るのは、ヘルスチェックは通っているがサーバーが応答していない時、とのこと。<br/>
タイムアウトするようになったあと、ヘルスチェックにも失敗して、インスタンスが切り離されているようです。</p>

<h3>エラー箇所を探る</h3>

<p>エラーが起こっている箇所を特定するため</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ELB -&gt; Nginx -&gt; Node.jsアプリ
</span><span class='line'>(1)    (2)      (3)</span></code></pre></td></tr></table></div></figure>


<ol>
<li>ELB越しでアクセス</li>
<li>Nginx に直接アクセス</li>
<li>Nodeアプリに直接アクセス</li>
</ol>


<p>の３つを、障害が起こっている時に試しました。<br/>
その結果、(1) のみでエラーが起こっている状況を確認しました。</p>

<p>問題は、 (1)ELB か (2)Nginx。またはその間にありそうです。</p>

<h3>Nginxの設定を調整してみる</h3>

<p>Nginxに直接アクセスした際には問題が起こっていないことから、ELBからの接続にNginxが設定上うまく対応できていない箇所があることを疑いました。</p>

<p>ELBは、外部からのHTTPリクエストごとに接続を貼り直さず、インスタンスに対してKeepAlvieしたコネクションを使いまわしてリクエストしてくれるらしいことを記事でみつけました。</p>

<p>参考： <a href="http://debiancdn.wordpress.com/2012/06/14/amazon-elb%E3%82%92%E3%81%86%E3%81%BE%E3%81%8F%E3%81%A4%E3%81%8B%E3%81%86%E3%81%AB%E3%81%AF%E3%80%81keepalive%E3%82%92%E6%9C%89%E5%8A%B9%E3%81%AB%E3%81%97%E3%82%88%E3%81%86%E3%80%82timeout%E3%81%AF60/">Amazon ELBをうまくつかうには、KeepAliveを有効にしよう。Timeoutは60秒よりだいぶ長くしよう。その背景。</a></p>

<p>しかし、KeepAliveの値を変えてみるなどしましたが、特に変化なしでした。。</p>

<h2>ELB作りなおしたら直った</h2>

<p>原因がまったくわからなくなったので、もしやと思い、新しいELBを作り、その下に問題を起こしているインスタンスをつなげてみたところ、なんと問題なく動作しました。</p>

<p>ELBの設定もすべて同じにしたので、いまのところ何が悪かったのかわかっていません。。</p>

<p>気持ち悪さが残りますが、同じような現象かも？と思われるAWSフォーラムへの投稿を発見。みなさん作りなおしたり、AWSのサポートの人に設定をリセット？してもらったりして直っているようです。</p>

<p>参考URL:</p>

<ul>
<li><a href="https://forums.aws.amazon.com/message.jspa?messageID=535336#535336">ELB Health Checks incorrectly failing</a></li>
<li><a href="https://forums.aws.amazon.com/thread.jspa?threadID=149123&amp;tstart=0">ELB can&rsquo;t connect to EC2 instance anymore</a></li>
<li><a href="http://kamip.hateblo.jp/entry/2013/11/13/051145">ELBのヘルスチェックでエラー</a></li>
</ul>


<p>はっきりした原因がわからず、少し気持ち悪いですが、また起こらないことを祈りつつ、いったん静観しています。</p>

<p>おしまい</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jadeのmixinでこころぴょんぴょん]]></title>
    <link href="http://blog.wacul.co.jp/blog/2014/07/18/jade-mixins/"/>
    <updated>2014-07-18T16:00:00+09:00</updated>
    <id>http://blog.wacul.co.jp/blog/2014/07/18/jade-mixins</id>
    <content type="html"><![CDATA[<p>Jadeにはmixinという再利用可能なオレオレ要素を作る機能があります。
mixinの機能についての解説はすでにやられてる方がいるので(<a href="http://blog.kazupon.jp/post/38877362879/jade-mixin-tips">かずぽんブログ • Jadeで便利なmixinの機能</a>)ここではmixinがどのようにコンパイルされてるのかを解説しようかと思います。ちなみに<a href="http://jade-lang.com/demo/">jade-lang.com/demo/</a>上でリアルタイムにコンパイル結果を確認することができます。</p>

<hr />

<p>さっそく本題に入ります。以下のJadeのコード例を見て下さい。なんだかごてごてしているように見えますが、ここでは基本的なmixinの機能を全て使っています(もし記法がわからなければ上記ブログを参照することをおすすめします)。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='jade'><span class='line'><span class="nt">mixin</span> foo(arg)
</span><span class='line'>  <span class="nt">div</span> foooooo <span class="si">#{</span><span class="n">arg</span><span class="si">}</span>!
</span><span class='line'>  <span class="nt">div</span>(<span class="na">class=</span><span class="nv">attributes</span><span class="err">.</span><span class="na">class</span> <span class="na">id=</span><span class="nv">attributes</span><span class="err">.</span><span class="na">id</span>)
</span><span class='line'>    <span class="nt">block</span>
</span><span class='line'>
</span><span class='line'><span class="err">+</span><span class="nt">foo</span>(<span class="err">&quot;こんにちは&quot;</span>)<span class="nc">.hoge</span><span class="nf">#fuga</span>(<span class="na">attr1=</span><span class="s">&quot;js&quot;</span>) hello
</span></code></pre></td></tr></table></div></figure>


<p>このファイルをコンパイルすると以下のようなコードが生成されます(幅の都合上折り返しています)。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">template</span><span class="p">(</span><span class="nx">locals</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">buf</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">jade_mixins</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>    <span class="nx">jade_mixins</span><span class="p">[</span><span class="s2">&quot;foo&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">arg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">block</span> <span class="o">=</span> <span class="k">this</span> <span class="o">&amp;&amp;</span> <span class="k">this</span><span class="p">.</span><span class="nx">block</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">attributes</span> <span class="o">=</span> <span class="k">this</span> <span class="o">&amp;&amp;</span> <span class="k">this</span><span class="p">.</span><span class="nx">attributes</span> <span class="o">||</span> <span class="p">{};</span>
</span><span class='line'>        <span class="nx">buf</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span>
</span><span class='line'>            <span class="s1">&#39;&lt;div&gt;foooooo &#39;</span> <span class="o">+</span>
</span><span class='line'>            <span class="nx">jade</span><span class="p">.</span><span class="nx">escape</span><span class="p">((</span><span class="nx">jade</span><span class="p">.</span><span class="nx">interp</span> <span class="o">=</span> <span class="nx">arg</span><span class="p">)</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">?</span> <span class="s2">&quot;&quot;</span> <span class="o">:</span> <span class="nx">jade</span><span class="p">.</span><span class="nx">interp</span><span class="p">)</span> <span class="o">+</span>
</span><span class='line'>            <span class="s1">&#39;!&lt;/div&gt;&lt;div&#39;</span> <span class="o">+</span>
</span><span class='line'>            <span class="nx">jade</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;id&quot;</span><span class="p">,</span> <span class="nx">attributes</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="kc">false</span><span class="p">)</span> <span class="o">+</span>
</span><span class='line'>            <span class="nx">jade</span><span class="p">.</span><span class="nx">cls</span><span class="p">([</span> <span class="nx">attributes</span><span class="p">.</span><span class="kr">class</span> <span class="p">],</span> <span class="p">[</span> <span class="kc">true</span> <span class="p">])</span> <span class="o">+</span>
</span><span class='line'>            <span class="s2">&quot;&gt;&quot;</span>
</span><span class='line'>        <span class="p">);</span>
</span><span class='line'>        <span class="nx">block</span> <span class="o">&amp;&amp;</span> <span class="nx">block</span><span class="p">();</span>
</span><span class='line'>        <span class="nx">buf</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s2">&quot;&lt;/div&gt;&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="nx">jade_mixins</span><span class="p">[</span><span class="s2">&quot;foo&quot;</span><span class="p">].</span><span class="nx">call</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">block</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">buf</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s2">&quot;hello&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">attributes</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">id</span><span class="o">:</span> <span class="s2">&quot;fuga&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">attr1</span><span class="o">:</span> <span class="s2">&quot;js&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;class&quot;</span><span class="o">:</span> <span class="s2">&quot;hoge&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">},</span> <span class="s2">&quot;こんにちは&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">buf</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>HTML出力は以下のようになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div&gt;</span>foooooo こんにちは!<span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;fuga&quot;</span> <span class="na">class=</span><span class="s">&quot;hoge&quot;</span><span class="nt">&gt;</span>hello
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<p>コンパイルされたコードについて分けながら説明します。</p>

<p>まずはtemplate関数全体から。冒頭のlocalsはテンプレートに流し込むデータです(ここでは使っていませんが)。bufにはhtmlタグなどをテキストとして格納しておき、連結して最終的な結果として返します。
mixinはjade_mixinsに関数として格納されます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">template</span><span class="p">(</span><span class="nx">locals</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">buf</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">jade_mixins</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>    <span class="cm">/* ... 中身 ... */</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">buf</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>foo mixinの呼び出し部分です(定義は後回しにします)。<code>+foo("こんにちは").hoge#fuga(attr1="js") hello</code>の
最初の<code>"こんにちは"</code>が引数、classとidとattr1がattributesに格納されています。foo mixinの中身であるhelloは
block関数の中で<code>buf.push("hello")</code>することで所定の位置にhelloの文字列が表示されることになります。
blockとattributesはthisコンテキストとして関数に渡されます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">jade_mixins</span><span class="p">[</span><span class="s2">&quot;foo&quot;</span><span class="p">].</span><span class="nx">call</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">block</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">buf</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s2">&quot;hello&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">attributes</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">id</span><span class="o">:</span> <span class="s2">&quot;fuga&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">attr1</span><span class="o">:</span> <span class="s2">&quot;js&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;class&quot;</span><span class="o">:</span> <span class="s2">&quot;hoge&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">},</span> <span class="s2">&quot;こんにちは&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>foo mixinの実際の定義部分です。blockとattributesはこの関数の中でローカル変数として展開されます。
不気味なattributesはこんな感じで定義されてたわけです。<code>div "foooooo #{arg}!"</code>と<code>div(class=attributes.class id=attributes.id)</code>
の部分は特に問題無いですね。jadeでblockを置いていた行は<code>block &amp;&amp; block();</code>になっています。単純にblock関数があれば実行されるだけで、
ここではbufに<code>"hello"</code>を追加していることになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">jade_mixins</span><span class="p">[</span><span class="s2">&quot;foo&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">arg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">block</span> <span class="o">=</span> <span class="k">this</span> <span class="o">&amp;&amp;</span> <span class="k">this</span><span class="p">.</span><span class="nx">block</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">attributes</span> <span class="o">=</span> <span class="k">this</span> <span class="o">&amp;&amp;</span> <span class="k">this</span><span class="p">.</span><span class="nx">attributes</span> <span class="o">||</span> <span class="p">{};</span>
</span><span class='line'>    <span class="nx">buf</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span>
</span><span class='line'>        <span class="s1">&#39;&lt;div&gt;foooooo &#39;</span> <span class="o">+</span>
</span><span class='line'>        <span class="nx">jade</span><span class="p">.</span><span class="nx">escape</span><span class="p">((</span><span class="nx">jade</span><span class="p">.</span><span class="nx">interp</span> <span class="o">=</span> <span class="nx">arg</span><span class="p">)</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">?</span> <span class="s2">&quot;&quot;</span> <span class="o">:</span> <span class="nx">jade</span><span class="p">.</span><span class="nx">interp</span><span class="p">)</span> <span class="o">+</span>
</span><span class='line'>        <span class="s1">&#39;!&lt;/div&gt;&lt;div&#39;</span> <span class="o">+</span>
</span><span class='line'>        <span class="nx">jade</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;id&quot;</span><span class="p">,</span> <span class="nx">attributes</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="kc">false</span><span class="p">)</span> <span class="o">+</span>
</span><span class='line'>        <span class="nx">jade</span><span class="p">.</span><span class="nx">cls</span><span class="p">([</span> <span class="nx">attributes</span><span class="p">.</span><span class="kr">class</span> <span class="p">],</span> <span class="p">[</span> <span class="kc">true</span> <span class="p">])</span> <span class="o">+</span>
</span><span class='line'>        <span class="s2">&quot;&gt;&quot;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>    <span class="nx">block</span> <span class="o">&amp;&amp;</span> <span class="nx">block</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">buf</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s2">&quot;&lt;/div&gt;&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h2>まとめ</h2>

<p>mixinがどのようにコンパイルされるかを解説しました。
attributesがどこから現れたのかとか、blockが実際に何をやっているかを知ることで
mixinを書くときに迷うことが少なくなるかと思います。
その他、mixin内ではJavaScriptを書ける上にbufにアクセスしてごにょごにょできるのですが、
そういうdirty hackはgithubで検索するとわんさか出てくるので興味ある人は調べてみてください。</p>

<h2>参考</h2>

<ul>
<li><a href="http://jade-lang.com/">Jade &ndash; Template Engine</a></li>
<li><a href="http://blog.kazupon.jp/post/38877362879/jade-mixin-tips">かずぽんブログ • Jadeで便利なmixinの機能</a></li>
<li><a href="http://rtshaaaa.hateblo.jp/entry/2013/11/15/092507">Jadeでゴリゴリ書いてく時にちょっと注意することとか &ndash; あまり新しくないもの</a></li>
<li><a href="https://github.com/search?q=jade+mixin&amp;ref=cmdform">github &ndash; Search · jade mixin</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SwiftでNSLayoutConstraintを綺麗に扱えるライブラリを作ってみる]]></title>
    <link href="http://blog.wacul.co.jp/blog/2014/07/14/swifty-layout/"/>
    <updated>2014-07-14T21:00:00+09:00</updated>
    <id>http://blog.wacul.co.jp/blog/2014/07/14/swifty-layout</id>
    <content type="html"><![CDATA[<p>こんにちわ、kyohです。</p>

<p>さぁさぁSwiftアツいですね。プライベートでは連日Swiftと戯れながら、RubyMotionで仕事しています。</p>

<p>以前RubyMotion向けに、NSLayoutConstraintの使い方を簡単に書いてみました(<a href="http://blog.wacul.co.jp/blog/2014/05/07/nslayoutconstraint/">iOSアプリで Programmable な自動レイアウト(NSLayoutConstraint)</a>)が、
Swift版を作っている最中なので、ここに掲載してみます。</p>

<h3>NSView版（for Mac OSX）</h3>

<p><a href="https://github.com/kyoh/SwiftyLayoutNS">https://github.com/kyoh/SwiftyLayoutNS</a></p>

<h3>UIView版（for iOS）</h3>

<p><a href="https://github.com/kyoh/SwiftyLayoutUI">https://github.com/kyoh/SwiftyLayoutUI</a></p>

<h3>使い方（例）</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ocaml'><span class='line'><span class="n">var</span> <span class="n">view1</span> <span class="o">=</span> <span class="nc">UILabel</span><span class="bp">()</span>
</span><span class='line'><span class="n">self</span><span class="o">.</span><span class="n">addSubview</span><span class="o">(</span><span class="n">view1</span><span class="o">)</span>
</span><span class='line'><span class="n">var</span> <span class="n">view2</span> <span class="o">=</span> <span class="nc">UILabel</span><span class="bp">()</span>
</span><span class='line'><span class="n">self</span><span class="o">.</span><span class="n">addSubview</span><span class="o">(</span><span class="n">view2</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="o">//</span> <span class="n">view</span><span class="err">に</span><span class="n">bind</span><span class="err">メソッドが追加されます。</span>
</span><span class='line'><span class="o">//</span> <span class="n">bind</span><span class="err">メソッドにはいくつでも</span><span class="nc">Constraint</span><span class="err">を指定することができます。</span>
</span><span class='line'><span class="n">self</span><span class="o">.</span><span class="n">bind</span><span class="o">(</span>
</span><span class='line'>  <span class="o">//</span> <span class="err">位置を他のビューの位置との相対位置で指定できます。</span>
</span><span class='line'>  <span class="o">//</span> <span class="err">例：</span><span class="n">view1</span> <span class="err">の上辺＝親ビューの上辺から</span><span class="mi">20</span><span class="n">px</span><span class="err">の位置</span>
</span><span class='line'>  <span class="n">view1</span><span class="o">.</span><span class="n">top</span> <span class="o">==</span> <span class="n">self</span><span class="o">.</span><span class="n">top</span> <span class="o">+</span> <span class="mi">20</span><span class="o">,</span>
</span><span class='line'>  <span class="o">//</span> <span class="err">位置を一定の位置を超えない様に指定できます。</span>
</span><span class='line'>  <span class="o">//</span> <span class="err">例：</span><span class="n">view2</span> <span class="err">の右辺＝親ビューの右辺から</span><span class="o">-</span><span class="mi">20</span><span class="n">px</span><span class="err">の位置よりも左側</span>
</span><span class='line'>  <span class="n">view1</span><span class="o">.</span><span class="n">right</span> <span class="o">&lt;=</span> <span class="n">self</span><span class="o">.</span><span class="n">right</span> <span class="o">-</span> <span class="mi">20</span><span class="o">,</span>
</span><span class='line'>  <span class="o">//</span> <span class="err">位置を他のビューの位置の倍数で指定できます。</span>
</span><span class='line'>  <span class="o">//</span> <span class="err">例：</span><span class="n">view1</span><span class="err">の幅</span> <span class="o">:</span> <span class="n">view2</span><span class="err">の幅＝</span><span class="mi">2</span> <span class="o">:</span> <span class="mi">3</span>
</span><span class='line'>  <span class="n">view1</span><span class="o">.</span><span class="n">width</span> <span class="o">*</span> <span class="mi">3</span> <span class="o">==</span> <span class="n">view2</span><span class="o">.</span><span class="n">width</span> <span class="o">*</span> <span class="mi">2</span><span class="o">,</span>
</span><span class='line'>  <span class="o">//</span> <span class="err">高さや幅などは、固定値も指定できます。</span>
</span><span class='line'>  <span class="o">//</span> <span class="err">例：</span><span class="n">view1</span> <span class="err">の高さを</span><span class="mi">45</span><span class="n">px</span><span class="err">に固定。</span>
</span><span class='line'>  <span class="n">view1</span><span class="o">.</span><span class="n">height</span> <span class="o">==</span> <span class="mi">45</span><span class="o">,</span>
</span><span class='line'><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>ちなみに、Swiftのコードハイライトで困ったときは、「Ocaml」を代用するといいみたいです。
この記事でも（まだSwiftのハイライトプラグインがないため）Ocamlを代用しています。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[日付の繰り返しルールに便利なRRULEを使う]]></title>
    <link href="http://blog.wacul.co.jp/blog/2014/07/07/rrule/"/>
    <updated>2014-07-07T13:50:00+09:00</updated>
    <id>http://blog.wacul.co.jp/blog/2014/07/07/rrule</id>
    <content type="html"><![CDATA[<h2>RRULEとは</h2>

<p>予定を記録するようなカレンダーアプリは、「毎週月曜日の10時から会議」のような繰り返しの予定を設定できる必要があります。
例えば、Googleカレンダーでは以下の画像のように、繰り返しの間隔、曜日、開始日、終了日、など細かに設定できます。</p>

<p><img src="http://blog.wacul.co.jp/images/2014-07-07-rrule/google-calendar.png" alt="Googleカレンダーの繰り返しの予定の設定画面" /></p>

<p>このような繰り返し設定をデータとして保存するのに有用な形式がRFC2445で定められている<a href='http://www.ietf.org/rfc/rfc2445.txt' target='_blank'>RRULE</a>です。</p>

<ul>
<li>RRULEの書式の例(毎週月曜日10時からの予定を 2014/6/25 から 2014/12/31 まで繰り返す)</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="s2">&quot;FREQ=WEEKLY;BYDAY=MO;DTSTART=20140625T010000Z;UNTIL=20141230T150000Z&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>JavaScriptでRRULEを扱う</h2>

<p>waculではnode.jsで自社サービスのサーバサイドを開発しているので、node.jsからRRULEを扱う例を紹介します。<br/>
<a href='https://github.com/jakubroztocil/rrule' target='_blank'>jakubroztocil/rrule</a> を使うと簡単にできます(サーバサイドでもクライアントサイドでも動きます)。</p>

<p>先ほどの例の「毎週月曜日10時からの予定を 2014/6/25 から 2014/12/31 まで繰り返す」を行います。<br/>
生成の仕方は2通りあります。<br/>
まず、以下のようにRRuleを生成するときに引数として渡す方法です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">RRule</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;rrule&#39;</span><span class="p">).</span><span class="nx">RRule</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">rule</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">RRule</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">freq</span><span class="o">:</span> <span class="nx">RRule</span><span class="p">.</span><span class="nx">WEEKLY</span><span class="p">,</span>                       <span class="c1">//毎週</span>
</span><span class='line'>    <span class="nx">byweekday</span><span class="o">:</span> <span class="p">[</span><span class="nx">RRule</span><span class="p">.</span><span class="nx">MO</span><span class="p">],</span>                    <span class="c1">//月曜日</span>
</span><span class='line'>    <span class="nx">dtstart</span><span class="o">:</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="mi">2014</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>    <span class="c1">//2014/06/25 から 10:00 始まりで</span>
</span><span class='line'>    <span class="nx">until</span><span class="o">:</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="mi">2014</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">31</span><span class="p">)</span>             <span class="c1">//2014/12/31 まで</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>次に、RRULEの書式から生成する方法です</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">RRule</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;rrule&#39;</span><span class="p">).</span><span class="nx">RRule</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">rule</span> <span class="o">=</span> <span class="nx">RRule</span><span class="p">.</span><span class="nx">fromString</span><span class="p">(</span><span class="s1">&#39;FREQ=WEEKLY;BYDAY=MO;DTSTART=20140625T010000Z;UNTIL=20141230T150000Z&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>このようにして、生成したRRULEのオブジェクトをルールに則って出力します。出力結果はJavaScriptのDate型の配列になります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">rule</span><span class="p">.</span><span class="nx">all</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//実行結果</span>
</span><span class='line'><span class="p">[</span> <span class="nx">Mon</span> <span class="nx">Jun</span> <span class="mi">30</span> <span class="mi">2014</span> <span class="mi">10</span><span class="o">:</span><span class="mi">00</span><span class="o">:</span><span class="mi">00</span> <span class="nx">GMT</span><span class="o">+</span><span class="mi">0900</span> <span class="p">(</span><span class="nx">JST</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">Mon</span> <span class="nx">Jul</span> <span class="mi">07</span> <span class="mi">2014</span> <span class="mi">10</span><span class="o">:</span><span class="mi">00</span><span class="o">:</span><span class="mi">00</span> <span class="nx">GMT</span><span class="o">+</span><span class="mi">0900</span> <span class="p">(</span><span class="nx">JST</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">Mon</span> <span class="nx">Jul</span> <span class="mi">14</span> <span class="mi">2014</span> <span class="mi">10</span><span class="o">:</span><span class="mi">00</span><span class="o">:</span><span class="mi">00</span> <span class="nx">GMT</span><span class="o">+</span><span class="mi">0900</span> <span class="p">(</span><span class="nx">JST</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">Mon</span> <span class="nx">Jul</span> <span class="mi">21</span> <span class="mi">2014</span> <span class="mi">10</span><span class="o">:</span><span class="mi">00</span><span class="o">:</span><span class="mi">00</span> <span class="nx">GMT</span><span class="o">+</span><span class="mi">0900</span> <span class="p">(</span><span class="nx">JST</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">Mon</span> <span class="nx">Jul</span> <span class="mi">28</span> <span class="mi">2014</span> <span class="mi">10</span><span class="o">:</span><span class="mi">00</span><span class="o">:</span><span class="mi">00</span> <span class="nx">GMT</span><span class="o">+</span><span class="mi">0900</span> <span class="p">(</span><span class="nx">JST</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">Mon</span> <span class="nx">Aug</span> <span class="mi">04</span> <span class="mi">2014</span> <span class="mi">10</span><span class="o">:</span><span class="mi">00</span><span class="o">:</span><span class="mi">00</span> <span class="nx">GMT</span><span class="o">+</span><span class="mi">0900</span> <span class="p">(</span><span class="nx">JST</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">Mon</span> <span class="nx">Aug</span> <span class="mi">11</span> <span class="mi">2014</span> <span class="mi">10</span><span class="o">:</span><span class="mi">00</span><span class="o">:</span><span class="mi">00</span> <span class="nx">GMT</span><span class="o">+</span><span class="mi">0900</span> <span class="p">(</span><span class="nx">JST</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">Mon</span> <span class="nx">Aug</span> <span class="mi">18</span> <span class="mi">2014</span> <span class="mi">10</span><span class="o">:</span><span class="mi">00</span><span class="o">:</span><span class="mi">00</span> <span class="nx">GMT</span><span class="o">+</span><span class="mi">0900</span> <span class="p">(</span><span class="nx">JST</span><span class="p">),</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記のRRULEのオブジェクトから逆にRRULEの文字列を取得する方法は以下です。<br/>
この文字列を日付の繰り返しルールとしてDBに保存しておきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">rule</span><span class="p">.</span><span class="nx">toString</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//実行結果</span>
</span><span class='line'><span class="nx">FREQ</span><span class="o">=</span><span class="nx">WEEKLY</span><span class="p">;</span><span class="nx">BYDAY</span><span class="o">=</span><span class="nx">MO</span><span class="p">;</span><span class="nx">DTSTART</span><span class="o">=</span><span class="mi">20140625</span><span class="nx">T010000Z</span><span class="p">;</span><span class="nx">UNTIL</span><span class="o">=</span><span class="mi">20141230</span><span class="nx">T150000Z</span>
</span></code></pre></td></tr></table></div></figure>


<p>日付の繰り返し処理を扱うのはなかなか骨が折れる作業なので、RRULEを扱えるこのようなライブラリが用意されているのは非常に助かります。</p>

<p>ちなみにカレンダーアプリのようなものを実装する際はGoogleカレンダーのAPIを試してみると参考になります。<br/>
<a href='https://developers.google.com/apis-explorer/#p/' target='_blank'>Google API Explorer</a>からCalendar API を選択し、
この中にあるcalendar.events.list APIを呼び、その結果を見るとわかりやすいです。<br/>
Googleカレンダーでは以下のURLにある「Recurring events」の項目としてRRULEを保存しています。<br/>
<a href='https://developers.google.com/google-apps/calendar/concepts?hl=ja' target='_blank'>Google Apps Calendar API Concepts and Use Cases</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ワカル社内で使っているツール・サービスのご紹介]]></title>
    <link href="http://blog.wacul.co.jp/blog/2014/06/26/wacul-tools/"/>
    <updated>2014-06-26T13:00:00+09:00</updated>
    <id>http://blog.wacul.co.jp/blog/2014/06/26/wacul-tools</id>
    <content type="html"><![CDATA[<p>こんにちわ、包です。</p>

<p>今回はワカル社内で使っているサービスやツールたちをご紹介します。
ソフトウェア系はMacOSXのアプリが中心です。</p>

<h2>1. コミュニケーション</h2>

<h3><a href="http://skype.com">Skype</a></h3>

<p>ワカルでは創業当時はみなリモートで作業していたため、頻繁に音声やビデオ会議をする文化がありました。
いまでも集中して実装したい時などには自宅作業をする人もいるので、そんなとき活躍しています。</p>

<p>ただ、どうしてもP2Pなので、送ったと思っていたメッセージが送られていなかったり、検索性が弱かったり、モバイルアプリでの通信に時間がかかったりといった不満がでてきています。
他のチャットサービスへの乗り換えを検討していますが、音声通話がシームレスで手軽なので、まだ移行できないでいます。</p>

<h3><a href="http://drive.google.com">Google Docs (Google Drive)</a></h3>

<p>共同編集が必要なドキュメント(スケジュール表や議事録など)はGoogle Docsで管理しています。</p>

<p>みんなでいじるときのリアルタイム編集合戦感が好きです。</p>

<h3><a href="http://skitch.com">Skitch</a></h3>

<p>画面のキャプチャに説明を付けたい時にはこちら。
キャプチャして説明を書いて、下のトグル部分をドラッグすると、ファイルと同じ扱いになるので、GitHub Issuesとかにドラッグ&amp;ドロップするだけでアップロードできます。便利！</p>

<p><img src="http://blog.wacul.co.jp/images/2014-06-26-wacul-tools/skitch-github.png" alt="skitch-github" /></p>

<h3><a href="http://www.teamviewer.com/ja/">TeamViewer</a></h3>

<p>画面の共有と、リモート操作ができるソフトです。<br/>
リモートでのペアプロもこのソフトとSkypeがあれば難なく行えます。</p>

<h2>2. 開発関連</h2>

<h3><a href="http://github.com">GitHub</a></h3>

<p>みんなだいすきGitHubです。社内のリポジトリはすべてGitHubで管理しています。
プログラマチームのチケット管理もGitHub Issuesを使っています。</p>

<p>他にも、Deploy Hooksをつかって、自動でテストサーバーを立ち上げる仕組みを運用しています。これについてはいつか別記事で。</p>

<h3><a href="http://moqups.com">Moqups</a></h3>

<p>画面のワイヤーフレームを作るWebアプリです。
ワイヤーフレーム系のツールはいろいろ使ったのですが、パーツが多すぎず、さくさく動いて共有も簡単なので、moqupsを最近では使っています。</p>

<p><img src="http://blog.wacul.co.jp/images/2014-06-26-wacul-tools/moqups.png" alt="moqups" /></p>

<h3><a href="http://kapeli.com/dash">Dash</a></h3>

<p>プログラミング言語やライブラリの各種リファレンスをローカルにダウンロードして高速検索できるソフト。iOSの開発時には必須でした。</p>

<p>Emacsのショートカットキーを割り当てておくと捗ります。<br/>
(以下のコードは、<a href="https://github.com/ainame/motion-mode">motion-mode</a>から拝借しました )</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="c1">;; dash 開く</span>
</span><span class='line'><span class="c1">;; motion-mode ( https://github.com/ainame/motion-mode )より拝借</span>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">dash-at-point</span> <span class="p">()</span>
</span><span class='line'>  <span class="s">&quot;This function open document by Dash.app.&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">interactive</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="kt">keyword</span> <span class="p">(</span><span class="nv">thing-at-point</span> <span class="ss">&#39;word</span><span class="p">)))</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">princ</span> <span class="kt">keyword</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nv">shell-command</span> <span class="p">(</span><span class="nb">format</span> <span class="s">&quot;open dash://%s&quot;</span> <span class="kt">keyword</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nv">define-key</span> <span class="nv">global-map</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;C-c C-d&quot;</span><span class="p">)</span> <span class="ss">&#39;dash-at-point</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3><a href="http://markedapp.com/">Marked</a></h3>

<p>Markdownのプレビューツールです。エディタはついていないので、自分好みのものを使います。
ファイルが保存されたタイミングで、自動的に更新され、かつ、更新された箇所に自動でスクロールしてくれるすぐれものです。</p>

<h3><a href="https://deploygate.com">DeployGate</a></h3>

<p>iOS/Android でテスト用にアプリを配布するサービスです。<br/>
社内でデザイナーのiPadにアプリを配信して、細かいチェックなどを行うのに便利でした。</p>

<h2>その他</h2>

<h3><a href="https://pqrs.org/macosx/keyremap4macbook/index.html.ja">KeyRemap4MacBook</a></h3>

<p>OSXの、同じキーを押したままにした時の繰り返し速度はデフォルトだとめっさ遅いです。このソフトを使うと、繰り返しの速さを調整できるので、速くするとテキストの編集が捗ります。<br/>
その他にもいろいろ機能があるみたいですが、僕は使ってません。</p>

<h3><a href="http://www.alfredapp.com/">Alfred</a></h3>

<p>OSX用のアプリケーションランチャです。昔はQuickSilverを使ってましたが、こちらに乗り換えました。<br/>
社内でも使ってる人が多いです。</p>

<p>Dockが空にできて快適生活です。</p>

<h3><a href="http://wufoo.com">wufoo</a></h3>

<p>フォームの生成サービスです。手軽に作れ、結果もWebで一覧できます。<br/>
ワカルの<a href="http://wacul.co.jp/contact/">お問い合わせページ</a>や、アルバイトの応募フォームなどで利用しています。</p>

<h2>以上です！</h2>

<p>わりと有名なサービスばかりですが、弊社ぐらいのチーム ( 10-20人ぐらい ) にはぴったりはまるものばかりだと思います。<br/>
まだ使ったことのないものがあったら、使ってみてください！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJSで楽々、フォームを作ってみよう]]></title>
    <link href="http://blog.wacul.co.jp/blog/2014/06/23/angular-form/"/>
    <updated>2014-06-23T16:30:00+09:00</updated>
    <id>http://blog.wacul.co.jp/blog/2014/06/23/angular-form</id>
    <content type="html"><![CDATA[<p>AngularJSのformディレクティブは強力なバリデーション機能を提供します。
以下は基本的な使用例です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;form</span> <span class="na">name=</span><span class="s">&quot;form&quot;</span><span class="nt">&gt;</span><span class="c">&lt;!-- 1 --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">name=</span><span class="s">&quot;firstName&quot;</span> <span class="na">ng-model=</span><span class="s">&quot;user.firstName&quot;</span> <span class="na">required</span><span class="nt">&gt;</span><span class="c">&lt;!-- 2 --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;span</span> <span class="na">ng-show=</span><span class="s">&quot;form.firstName.$error.required&quot;</span><span class="nt">&gt;</span>何も入力されていません。<span class="nt">&lt;/span&gt;</span><span class="c">&lt;!-- 3 --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;button</span> <span class="na">ng-disabled=</span><span class="s">&quot;foo.$invalid&quot;</span> <span class="na">ng-click=</span><span class="s">&quot;submit()&quot;</span><span class="nt">&gt;</span>submit<span class="nt">&lt;/button&gt;</span><span class="c">&lt;!-- 4 --&gt;</span>
</span><span class='line'><span class="nt">&lt;/form&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>番号ごとに説明すると</p>

<ol>
<li>formのname属性を設定します。ここでは<code>name="form"</code>としています。
<code>form</code>のプロパティからform全体のバリデーション情報を得ることができます。</li>
<li>form以下のinputのname属性を設定します。ここでは<code>name="firstName"</code>としています。
<code>firstName</code>のプロパティからこのinputのバリデーション情報を得ることができます。
(バリデーションを有効にするためにはng-modelを設定する必要があります)</li>
<li><code>foo.firstName.$error.required</code>からrequired属性のバリデーション情報を取得しています。
エラー情報を表示したりするときに使用することができます。</li>
<li><code>foo.$invalid</code>からフォームに誤りがあるかどうかを取得できます。
ここでは誤りがある場合ボタンを無効化しています。</li>
</ol>


<h2>取得できる情報</h2>

<p>formや各inputのname属性(上の例では<code>form</code>と<code>form.firstName</code>)のプロパティからは以下の表のようなバリデーションの情報を取得することができます。</p>

<table>
<thead>
<tr>
<th> プロパティ名 </th>
<th> 詳細 </th>
<th> 型</th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>$dirty</code> </td>
<td> formに一回以上何かしらの入力を行った </td>
<td> <code>boolean</code></td>
</tr>
<tr>
<td> <code>$pristine</code> </td>
<td> formに全く入力を行っていない(<code>$dirty</code>の逆) </td>
<td> <code>boolean</code></td>
</tr>
<tr>
<td> <code>$valid</code> </td>
<td> formの値が正しい </td>
<td> <code>boolean</code></td>
</tr>
<tr>
<td> <code>$invalid</code> </td>
<td> formの値が誤っている </td>
<td> <code>boolean</code></td>
</tr>
<tr>
<td> <code>$error</code> </td>
<td> さらに詳細なエラー情報。上の例でいうところの<code>foo.firstName.$error.required</code>。この他に<code>email</code>や<code>maxlength</code>などがデフォルトで使えます。 </td>
<td> <code>Object</code></td>
</tr>
</tbody>
</table>


<h2>カスタムバリデーション</h2>

<p>AngularJSではデフォルトで色々なバリデーションを行うことができますが、カスタムバリデーションを自作することもできます。
以下の例では3と5の倍数であるときだけ値が正しいことにするfizzbuzzディレクティブを作成しています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;form</span> <span class="na">name=</span><span class="s">&quot;form&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">name=</span><span class="s">&quot;num&quot;</span> <span class="na">ng-model=</span><span class="s">&quot;num&quot;</span> <span class="na">fizzbuzz</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;span</span> <span class="na">ng-show=</span><span class="s">&quot;form.num.$error.fizzbuzz&quot;</span><span class="nt">&gt;</span>3と5の倍数でない。<span class="nt">&lt;/span&gt;</span>
</span><span class='line'><span class="nt">&lt;/form&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;hoge&#39;</span><span class="p">,</span> <span class="p">[]).</span><span class="nx">directive</span><span class="p">(</span><span class="s1">&#39;fizzbuzz&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">require</span><span class="o">:</span> <span class="s1">&#39;ngModel&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">link</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">$element</span><span class="p">,</span> <span class="nx">$attrs</span><span class="p">,</span> <span class="nx">ctrl</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// ngModelControllerの$parsesプロパティに検証用の関数を登録します。</span>
</span><span class='line'>      <span class="nx">ctrl</span><span class="p">.</span><span class="nx">$parsers</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">viewValue</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">viewValue</span> <span class="o">=</span> <span class="o">+</span><span class="nx">viewValue</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">viewValue</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">===</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="nx">viewValue</span> <span class="o">%</span> <span class="mi">5</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">ctrl</span><span class="p">.</span><span class="nx">$setValidity</span><span class="p">(</span><span class="s1">&#39;fizzbuzz&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
</span><span class='line'>          <span class="k">return</span> <span class="nx">viewValue</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">ctrl</span><span class="p">.</span><span class="nx">$setValidity</span><span class="p">(</span><span class="s1">&#39;fizzbuzz&#39;</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>          <span class="k">return</span> <span class="kc">undefined</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://embed.plnkr.co/iCVJJ73Np1oHoT9nOMGC/" target="_blank">DEMO</a></p>

<h2>Tips</h2>

<p>実際に役立ちそうな(まぁ、実際に使ってますが)Tipsをいくつか紹介します。</p>

<h3>ng-modelを省略する</h3>

<p>inputに一々ng-modelを設定するのは面倒です。
formのコンパイル時にinput(またはselect, textarea)のname属性からng-modelを補完するようなディレクティブを作成することで記述を減らすことができます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!-- ng-model=&quot;input1&quot;として補完 --&gt;</span>
</span><span class='line'><span class="nt">&lt;form</span> <span class="na">name=</span><span class="s">&quot;form1&quot;</span> <span class="na">auto-ng-model</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">name=</span><span class="s">&quot;input1&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  input1 = 
</span><span class='line'><span class="nt">&lt;/form&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c">&lt;!-- ng-model=&quot;data.input2&quot;として補完 --&gt;</span>
</span><span class='line'><span class="nt">&lt;form</span> <span class="na">name=</span><span class="s">&quot;form2&quot;</span> <span class="na">auto-ng-model=</span><span class="s">&quot;data&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">name=</span><span class="s">&quot;input2&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;select</span> <span class="na">name=</span><span class="s">&quot;select&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;option</span> <span class="na">value=</span><span class="s">&quot;1&quot;</span><span class="nt">&gt;</span>1<span class="nt">&lt;/option&gt;</span>
</span><span class='line'>    <span class="nt">&lt;option</span> <span class="na">value=</span><span class="s">&quot;2&quot;</span><span class="nt">&gt;</span>2<span class="nt">&lt;/option&gt;</span>
</span><span class='line'>    <span class="nt">&lt;option</span> <span class="na">value=</span><span class="s">&quot;3&quot;</span><span class="nt">&gt;</span>3<span class="nt">&lt;/option&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/select&gt;</span>
</span><span class='line'>  <span class="nt">&lt;br</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;textarea</span> <span class="na">name=</span><span class="s">&quot;textarea&quot;</span><span class="nt">&gt;&lt;/textarea&gt;</span>
</span><span class='line'>  <span class="nt">&lt;pre&gt;</span>data = <span class="nt">&lt;/pre&gt;</span>
</span><span class='line'><span class="nt">&lt;/form&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;hoge&#39;</span><span class="p">,</span> <span class="p">[]).</span><span class="nx">directive</span><span class="p">(</span><span class="s1">&#39;autoNgModel&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">compile</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">element</span><span class="p">,</span> <span class="nx">attrs</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// auto-ng-modelが設定されている要素以下のinput要素にng-modelを設定します。</span>
</span><span class='line'>      <span class="kd">function</span> <span class="nx">setNgModel</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">getAttribute</span><span class="p">(</span><span class="s1">&#39;ng-model&#39;</span><span class="p">))</span> <span class="k">return</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">e</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s1">&#39;ng-model&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">attrs</span><span class="p">.</span><span class="nx">autoNgModel</span> <span class="o">?</span> <span class="nx">attrs</span><span class="p">.</span><span class="nx">autoNgModel</span> <span class="o">+</span> <span class="s1">&#39;.&#39;</span> <span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="nx">e</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="nx">angular</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">element</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;input&#39;</span><span class="p">),</span> <span class="nx">setNgModel</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">angular</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">element</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;select&#39;</span><span class="p">),</span> <span class="nx">setNgModel</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">angular</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">element</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;textarea&#39;</span><span class="p">),</span> <span class="nx">setNgModel</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://embed.plnkr.co/4GsgZd4FiG7ThVCBnBnq/" target="_blank">DEMO</a></p>

<h3>requiredのメッセージを出さないrequired</h3>

<p>required属性はとても便利ですが、エラーメッセージを自分で用意しているときなどはポップアップが余計なことがあります。
しかし、novalidate属性をつけるとバリデーション自体行われないので困ります。
こういう場合は、AngularJSの枠組みだけでエラーを検出できるディレクティブを作成すると捗ります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;form</span> <span class="na">name=</span><span class="s">&quot;form&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">name=</span><span class="s">&quot;firstName&quot;</span> <span class="na">ng-model=</span><span class="s">&quot;user.firstName&quot;</span> <span class="na">silent-required</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;span</span> <span class="na">ng-show=</span><span class="s">&quot;form.firstName.$error.required&quot;</span><span class="nt">&gt;</span>何も入力されていません。<span class="nt">&lt;/span&gt;</span>
</span><span class='line'>  <span class="nt">&lt;button</span> <span class="na">ng-click=</span><span class="s">&quot;submit()&quot;</span><span class="nt">&gt;</span>submit<span class="nt">&lt;/button&gt;</span>
</span><span class='line'><span class="nt">&lt;/form&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// https://github.com/angular/angular.js/blob/d606e66f7ab893f8799991883fd02b0e66e3225e/src/ng/directive/input.js#L2094</span>
</span><span class='line'><span class="c1">// のrequired判定する部分だけ拝借します。</span>
</span><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;hoge&#39;</span><span class="p">,</span> <span class="p">[]).</span><span class="nx">directive</span><span class="p">(</span><span class="s1">&#39;silentRequired&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">require</span><span class="o">:</span> <span class="s1">&#39;ngModel&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">link</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">$element</span><span class="p">,</span> <span class="nx">$attrs</span><span class="p">,</span> <span class="nx">ctrl</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">validator</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">ctrl</span><span class="p">.</span><span class="nx">$isEmpty</span><span class="p">(</span><span class="nx">value</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">ctrl</span><span class="p">.</span><span class="nx">$setValidity</span><span class="p">(</span><span class="s1">&#39;required&#39;</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>          <span class="k">return</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">ctrl</span><span class="p">.</span><span class="nx">$setValidity</span><span class="p">(</span><span class="s1">&#39;required&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
</span><span class='line'>          <span class="k">return</span> <span class="nx">value</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">};</span>
</span><span class='line'>      <span class="nx">ctrl</span><span class="p">.</span><span class="nx">$formatters</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">validator</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">ctrl</span><span class="p">.</span><span class="nx">$parsers</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">validator</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://embed.plnkr.co/LU9Nds5lNb0r7FVkqdIY/" target="_blank">DEMO</a></p>

<h3>debounce</h3>

<p>バージョン1.3からですが、入力している途中はバリデーションを一旦止めてくれる機能があります。
使い方は簡単で、<code>ng-model-options="{ debounce: num }"</code>をinput要素に設定するだけです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;form</span> <span class="na">name=</span><span class="s">&quot;form&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;email&quot;</span> <span class="na">name=</span><span class="s">&quot;firstName&quot;</span> <span class="na">ng-model=</span><span class="s">&quot;user.firstName&quot;</span> <span class="na">ng-model-options=</span><span class="s">&quot;{ debounce: 300 }&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;span</span> <span class="na">ng-show=</span><span class="s">&quot;form.firstName.$error.email&quot;</span><span class="nt">&gt;</span>正しくないメールアドレスです。<span class="nt">&lt;/span&gt;</span>
</span><span class='line'><span class="nt">&lt;/form&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://embed.plnkr.co/G5GH3nAqJA5DqxIxmMXG/" target="_blank">DEMO</a></p>

<h2>まとめ</h2>

<p>AngularJSのフォームバリデーションは強力で拡張性が高いので、これを使いこなすとhtmlが読みやすくなり、コントローラーに記述するコードを減らすことができるでしょう。
みなさんもこれらの機能をどんどん使って楽々にフォームを作成してみて下さい。</p>

<h2>参考URL</h2>

<ul>
<li><a href="https://docs.angularjs.org/guide/forms" target="_blank">AngularJS: Developer Guide: Forms</a></li>
<li><a href="https://docs.angularjs.org/api/ng/type/form.FormController" target="_blank">AngularJS: API: form.FormController</a></li>
</ul>


<h2>トップ画像参照元</h2>

<ul>
<li><a href="https://www.flickr.com/photos/rapatski/4143069655/">OCR Computer Form by Tiemen Rapati</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
