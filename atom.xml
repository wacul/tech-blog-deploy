<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[The Wacul Blog]]></title>
  <link href="http://blog.wacul.co.jp//atom.xml" rel="self"/>
  <link href="http://blog.wacul.co.jp//"/>
  <updated>2014-06-11T13:10:11+09:00</updated>
  <id>http://blog.wacul.co.jp//</id>
  <author>
    <name><![CDATA[wacul]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Node.js と MongoDB で n-gramを使って全文検索]]></title>
    <link href="http://blog.wacul.co.jp//blog/2014/06/11/mongo-ngram/"/>
    <updated>2014-06-11T13:50:00+09:00</updated>
    <id>http://blog.wacul.co.jp//blog/2014/06/11/mongo-ngram</id>
    <content type="html"><![CDATA[<h2>n-gram による検索</h2>

<p>現在、自社開発を行っているプロジェクトではサーバサイドはnode.jsで開発しています。<br/>
そして、DBはMongoDBを採用し、node.jsからMongoDBへのアクセスは <a href='http://mongoosejs.com/' target='_blank'>mongoose</a>を使用しています。</p>

<p>今回、DBに保存されている「お客の名前」を検索したいという要求が生じました。<br/>
検索条件として、名前の途中でもヒットするようにする必要があります。<br/>
例えば「あい」で検索した場合、以下のような名前がヒットします。</p>

<ul>
<li>あいかわたろう</li>
<li>あいだはなこ</li>
<li>やまだあいこ</li>
<li>おちあいじろう</li>
</ul>


<p>また、上記の例で「あいだ」で検索した場合は以下の名前がヒットします。</p>

<ul>
<li>あいだはなこ</li>
</ul>


<p>このような検索を実現するために、n-gramによる検索を実装しました。<br/>
n-gramは文字列を nの長さで１文字ずつずらして切り出して保存します。</p>

<ul>
<li>n = 2 のとき 「あいかわたろう」という文字列<br/>
「あい」「いか」「かわ」「わた」「たろ」「ろう」</li>
</ul>


<p>今回は、2文字以上の文字列で検索がヒットするようにしたいので、n = 2 の bi-gramを実装します。</p>

<h2>mongoose での model 定義</h2>

<p>bi-gramで分割した文字列を、array で保存します。
mongooseの定義は以下のようになります。<br/>
また、検索の高速化のため、indexを張っておきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">customerSchema</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Schema</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">name</span> <span class="o">:</span>  <span class="nb">String</span><span class="p">,</span>     <span class="c1">//名前を保存するフィールド</span>
</span><span class='line'>  <span class="nx">bigram</span> <span class="o">:</span> <span class="p">{</span>          <span class="c1">//名前をbi-gramで分割した文字列を保存するフィールド</span>
</span><span class='line'>    <span class="nx">type</span> <span class="o">:</span> <span class="p">[</span><span class="nb">String</span><span class="p">],</span>
</span><span class='line'>    <span class="nx">index</span> <span class="o">:</span> <span class="kc">true</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>さらに保存時に自動的にngramを生成したいため、preの&#8217;save&#8217;をフックします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">customerSchema</span><span class="p">.</span><span class="nx">pre</span><span class="p">(</span><span class="s1">&#39;save&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">next</span><span class="p">){</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">isModified</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">)){</span>
</span><span class='line'>    <span class="c1">//変更があった時のみ生成する</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">bigram</span> <span class="o">=</span> <span class="nx">textToNgram</span><span class="p">(</span><span class="nx">searchWord</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>  <span class="c1">// bi-gramで分割して配列にする</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">* 文字列をn-gramで分割して返す</span>
</span><span class='line'><span class="cm">* @param {string} text - 分割対象の文字列</span>
</span><span class='line'><span class="cm">* @param {number} n - 分割数  bi-gramなら2</span>
</span><span class='line'><span class="cm">* @return {array} 分割した文字列をarrayで返す</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">textToNgram</span><span class="p">(</span><span class="nx">text</span><span class="p">,</span> <span class="nx">n</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">ngram</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;=</span> <span class="nx">text</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="nx">n</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">ngram</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">text</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">n</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">ngram</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>検索をする</h2>

<p>検索するときも、検索文字列をbi-gramで分割します。<br/>
この分割した文字列をMongoDBのクエリにある
<a href='http://docs.mongodb.org/manual/reference/operator/query/all/#op._S_all' target='_blank'>$all</a>
を使うことによって、検索できます。<br/>
$all は保存されているarrayフィールドに対して、クエリで渡したarrayの内容がすべて含まれているものを抽出できます。</p>

<p>mongooseのスキーマに投げるクエリは以下のようになります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">//検索対象の文字列をbi-gramで分割して、arrayに入れます。</span>
</span><span class='line'><span class="nx">searchWordBigram</span> <span class="o">=</span> <span class="nx">textToNgram</span><span class="p">(</span><span class="nx">searchWord</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">query</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">bigram</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$all</span> <span class="o">:</span> <span class="nx">searchWordBigram</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>正しくない検索のケース</h2>

<p>上記手法は検索文字列の順番を見ていないため、一部、正しくない検索結果が返る場合があります。<br/>
例えば、 「あいう」 というワードで検索した場合、「あいおいう」というワードもヒットします。
こういう特性があるので、使用する際は注意が必要です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UITableViewの一番上に隙間が出来てしまう件]]></title>
    <link href="http://blog.wacul.co.jp//blog/2014/06/05/tableview-upper-space/"/>
    <updated>2014-06-05T19:00:00+09:00</updated>
    <id>http://blog.wacul.co.jp//blog/2014/06/05/tableview-upper-space</id>
    <content type="html"><![CDATA[<p>こんにちは、wacul開発メンバーの kyoh です。
WWDC2014で<a href="https://developer.apple.com/swift/" target="_blank">Swift</a>が発表された時、
恋に落ちる音を聞いた気がします。</p>

<p>さて、今日は、最近iPadアプリの開発中に遭遇した不可解な事象と、その解決方法について書いてみようと思います。</p>

<h2>UITableView の狭き門、険しい道</h2>

<p>iOSアプリといえば凡そ避けることのできない「UITableView」ですが、一癖も二癖もあるそれに悩まされるのはiOS開発の登竜門となっているようです。
今回私も、そんな登竜門の狭い門柱に引っかかって苦しめられました。</p>

<h3>謎の隙間が発生する</h3>

<p>UITableViewController ベースの画面を作り、UINavigationControll に push した時のことです。
表示された画面には、ナビゲーションバーとセクションヘッダとの間に、意図しない隙間が表示されていました。</p>

<p><img src="http://blog.wacul.co.jp//images/2014-06-05-tableview-upper-space/upper_space.png" alt="UITableView と UINavigationBar との間に、33pxの隙間が生じている" /></p>

<h3>正体不明！</h3>

<p><a href="http://revealapp.com/" target="_blank">REVEAL</a>というツールなども駆使して、この隙間は一体なんぞやと探ってみました。が・・・</p>

<ul>
<li>UINavigationBar にははみ出すようなビューは含まれていない。</li>
<li>UITableViewController の tableView は、UINavigationBar と密着している。</li>
<li>UITableViewDelegateProtocol の tableView:heightForHeaderInSection:は実装済で、適切な高さが返っている。</li>
<li>同 Protocol の tableView:viewForHeaderInSection: も実装済で、同じ高さの view を返している。

<ul>
<li>返しているビューに、はみ出すような子孫ビューはない。</li>
</ul>
</li>
</ul>


<p>つまるところ、そこには何のビューもなければ何のマージンもない、「ただ開いている」隙間でした。</p>

<h3>怪しいプロパティ</h3>

<p>それとなく UITableView Class Reference を眺めていると、 tableHeaderView なる怪しげなプロパティを発見しました。</p>

<blockquote><p><strong>tableHeaderView</strong>
Returns an accessory view that is displayed above the table.
@property(nonatomic, retain) UIView *tableHeaderView</p>

<p><strong>Discussion</strong>
The default value is nil. The table header view is different from a section header.</p></blockquote>

<p>Tableの上に表示される何がしかのビューを設定できるようです。しかし調べてみても、説明にも書かれている通り、そこには nil が入っているだけでした。</p>

<h2>解決方法</h2>

<p>延々悩んだ結果、どうもその tableHeaderView が怪しいぞ、という結論にいたり、空のビューを設定すると見事に隙間が消えました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="p">[</span><span class="n">self</span> <span class="nl">setTableHeaderView:</span><span class="p">[[</span><span class="n">UIView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFrame:</span><span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mf">0.1</span><span class="p">,</span> <span class="mf">0.1</span><span class="p">)]]</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://blog.wacul.co.jp//images/2014-06-05-tableview-upper-space/no_space.png" alt="UINavigationBar の直下に セクションヘッダが密着している" /></p>

<h3>ちょっとした解説</h3>

<p>UINavigationController に push した場合にのみ発生する事象の様です。
また、UINavigationController の先頭にあるViewControllerの場合は発生しないみたい。</p>

<p>ちなみに、sectionHeaderView に設定する空 view は、高さと幅に有意値（0ではない値）を設定しないと、
この問題は解決しません。</p>

<p>UITableView のセルやセクションヘッダの高さを 0 にしたい場合は、0.1 を設定するのがセオリーです。
0を設定すると、基本的に「その他のプロパティ（例：sectionHeaderHeight）に従う大きさ」や「内容に従う大きさ」が設定される様です。</p>

<h2>けつろん！</h2>

<p>UITableView の上方に発生した謎の隙間に悩まされたら、置くだけ簡単 height=0.1 view!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyMotionを業務でのアプリ開発に使ってみた感想]]></title>
    <link href="http://blog.wacul.co.jp//blog/2014/05/30/ruby-motion/"/>
    <updated>2014-05-30T13:00:00+09:00</updated>
    <id>http://blog.wacul.co.jp//blog/2014/05/30/ruby-motion</id>
    <content type="html"><![CDATA[<p>こんにちわ。いまワカルでは、美容院向けのiPadアプリ &ldquo;clulu&rdquo; を開発中です。<br/>
テストも一旦終了し、最初のバージョンをApp Storeに申請したところです。</p>

<p>美容院では、お客様の予約管理を紙で行っているところがほとんどです。cluluは、そんな紙での管理方法から極力インターフェースを変えることなく、予約管理をiPadで行えるシステムです。また管理された情報を元に、リアルタイムに空き枠を検索・予約できるフォームを自分の美容院のホームページに設置できます。</p>

<p><img src="http://blog.wacul.co.jp//images/2014-05-30-ruby-motion/clulu-ss.png" alt="clulu-ss" /></p>

<p>サービスの詳細については、リリース後詳しくお伝えするとして、今回はiPad版開発で使った、
<a href="http://www.rubymotion.com/" target="_blank">RubyMotion</a> について書きたいと思います。</p>

<h2>なぜ RubyMotion を選んだか</h2>

<p>iOSアプリ開発環境にはおおまかに</p>

<ul>
<li>ObjectiveC(Xcode)</li>
<li>RubyMotion</li>
<li>Titanium, PhoneGap等、HTML,JSベースのもの</li>
</ul>


<p>があります。</p>

<p>まず、cluluは予約表の操作感を最適化したかったため、画面のアニメーション等パフォーマンス調整の難しいHTMLベースのものは、候補からはずしました。</p>

<p>僕自身は、2,3年前にiOSのアプリの開発経験があり、ひと通りObjectiveCとiOSのSDKについては理解している状態でした。</p>

<p>過去のiOS開発から、ObjectiveCコードを書くことへの気の重さのようなことを感じていました。
Webの開発では、僕はEmacs,弊社の他のエンジニアもSublime Textなど、好みのエディタで開発している状態で、Xcodeの操作に慣れるというのもひとつの障壁です。</p>

<p>RubyMotionを選択するにあたって、情報不足や、予期せぬ不具合への対応などが不安でしたが、2013年末ごろにはかなりコミュニティも盛り上がってきていました。
また、基本的にCocoaのAPIをそのまま使う形なので、RubyMotion特有の不具合は少なそうというのも後押しとなり、RubyMotionで実装することに決めました。</p>

<p>まとめると、RubyMotionを選んだ理由は次の３つです。</p>

<ul>
<li>iOSのSDKをそのまま使える (パフォーマンスの劣化が最小限、情報源が豊富)</li>
<li>ObjectiveCを書かなくてよい、 慣れたエディタで開発できる</li>
<li>コミュニティの盛り上がり (困ったときに参照する情報が十分にある)</li>
</ul>


<h2>実際に使ってみてよかった点</h2>

<h3>RubyのAPIの使いやすさ</h3>

<p>RubyMotionは、Rubyの基本的な型のAPIがそのまま使えるようになっているため、Array#each,map などのコレクション系の操作がRubyライクに書けます。
もちろんブロックも使えるので、データの加工のコードなどが短く書けます</p>

<h3>BubbleWrap, sugarcube便利</h3>

<p>2つとも、CocoaのAPIをラップして使いやすくしてくれるライブラリです。
両者は似たような機能を提供している部分が多いですが、sugarcubeはBubbleWrapより、UIKitのクラス自身を拡張しにいっている感じになっています。</p>

<p>それぞれ、使いどころによって便利なほうを使って実装しました。
自然にかけるので、どちらかというとsugarcubeのほうが利用頻度高めでした。</p>

<p>特に便利だったものたち</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">### sugarcube</span>
</span><span class='line'><span class="c1"># RGB HexからUIColor</span>
</span><span class='line'><span class="s1">&#39;#FBFBFB&#39;</span><span class="o">.</span><span class="n">uicolor</span>
</span><span class='line'><span class="c1"># ImageNamed のかわり</span>
</span><span class='line'><span class="s1">&#39;hogehogeimage&#39;</span><span class="o">.</span><span class="n">uiimage</span>
</span><span class='line'><span class="c1"># タイマー</span>
</span><span class='line'><span class="mi">30</span><span class="o">.</span><span class="n">second</span><span class="o">.</span><span class="n">every</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">refresh</span><span class="p">()</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1"># 日付の始まりの日</span>
</span><span class='line'><span class="n">dateTime</span><span class="o">.</span><span class="n">start_of_day</span>
</span><span class='line'><span class="c1"># NotificationCenter</span>
</span><span class='line'><span class="s2">&quot;SomeNotificationName&quot;</span><span class="o">.</span><span class="n">add_observer</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="ss">:&quot;onNotif:&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Mix-in便利</h3>

<p>Rubyならではの便利さとして最も大きかったのが、Mix-inの活用です。</p>

<p>例えばよくあるDelegateを取るクラスを作るためのMix-inとして以下のようなものを作りました</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Clulu</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">Delegation</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">delegate</span>
</span><span class='line'>      <span class="vi">@delegate</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">delegate</span><span class="o">=</span><span class="p">(</span><span class="n">d</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@delegate</span> <span class="o">=</span> <span class="no">WeakRef</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">d</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># delegateが設定されていたら指定されたメソッドを呼び出す</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">delegateCall</span><span class="p">(</span><span class="n">selector</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="vi">@delegate</span> <span class="ow">and</span> <span class="vi">@delegate</span><span class="o">.</span><span class="n">weakref_alive?</span> <span class="ow">and</span> <span class="vi">@delegate</span><span class="o">.</span><span class="n">respond_to?</span><span class="p">(</span><span class="n">selector</span><span class="p">)</span>
</span><span class='line'>        <span class="vi">@delegate</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">selector</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Delegateを実装したいクラスは、 <code>include Clulu::Delegation</code> するだけです。</p>

<p>他にも、ローディングやエラー処理など、共通の挙動をViewControllerに付けたい場合などに使いました。
実装を注入できるのは便利です。</p>

<h2>逆に大変だった点</h2>

<h3>サードパーティライブラリとの相性</h3>

<p>基本的にCocoaPodsに登録されているライブラリ群はそのまま使えました。
一部、ObjectiveCのプロパティ定義を利用しているライブラリなど、そのままでは使えないものもあったので
薄いラッパを作って使いました。</p>

<h3>メモリ管理</h3>

<p>基本的にRubyMotionがメモリを自動で管理してくれるのですが、循環参照に関しては開放してくれないので、
適宜弱参照( <code>WeakRef.new(hoge)</code> )などを使って、循環参照が起きない用配慮する必要があります。
また、Rubyのブロックを使うと、外側のスコープの変数を束縛したままになるため、注意が必要でした。</p>

<h3>コンパイル速度とタイプミス問題</h3>

<p>一般的にコンパイル言語は型チェックや静的な解析をしてくれるので、早めにタイプミスなどが見つけやすい構造になっています。
しかしRubyMotionの場合は、コンパイルと起動にそれなりの時間がかかる一方、実行時まで定義されていない変数や、型の間違いがわからないため、タイプミスするとわーってなります。
僕はEmacsを使っているので、motion-mode と ac-dict を使ってある程度補完が効くようにはしていたのですが、
それでもCocoaの長いメソッド名とか、思わぬタイプミスでわーってなっていました。
ここらへんは宿命でしょうが、なかなかストレスでした。</p>

<h2>まとめ</h2>

<p>今回アプリ開発に携わったのは、僕(
<a href="http://twitter.com/tutuming" target="_blank">tutuming</a>
)と、<a href="http://twitter.com/kyoh86" target="_blank">kyoh</a>
の2名です。
kyoh君はiOSの開発自体が初めてだったのですが、苦労しつつも1ヶ月もしたら慣れたようでした。</p>

<p>個人的には特にRubyMotionだったから大変だったということはなかったです。
それ以上にiOSのSDKの使い方とか、実装面での苦労のほうが多いです。</p>

<p>1度ObjectiveCでアプリを書いたことがあり、RubyやPython,JavaScriptなど、Webっぽい言語も経験がある程度ある人であれば、スムーズに移行でき、少しだけ効率も上がる感じじゃないかなと思います。</p>

<p>RubyMotion3.0 (今年後半リリース予定)では、Androidにも対応する(同じくネイティブのラッパ)みたいなので、どんどん広がっていけばいいですね！</p>

<h2>参考</h2>

<ul>
<li><a href="http://www.rubymotion.com/" target="_blank">RubyMotion公式サイト</a></li>
<li><a href="http://tosik.github.io/blog/2012/09/13/about-rubymotion/" target="_blank">RubyMotion について感想 &ndash; tosik blog</a></li>
<li><a href="http://d.hatena.ne.jp/naoya/20131205/1386237472" target="_blank">RubyMotion を1年以上使い続けてみての雑感 &ndash; naoyaのはてなダイアリー</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJSでのCORSな通信をpostMessageに置き換える]]></title>
    <link href="http://blog.wacul.co.jp//blog/2014/05/21/angular-cors-postmessage/"/>
    <updated>2014-05-21T13:50:00+09:00</updated>
    <id>http://blog.wacul.co.jp//blog/2014/05/21/angular-cors-postmessage</id>
    <content type="html"><![CDATA[<p>あなたは突然AngularJSでCORSでxhrな通信を行いたくなりました。
通信時に独自のヘッダーを付けたいのでpostMessageを使う必要がありましたが、
すでに<code>$http</code>、<code>$resource</code>サービスを使った結構な量のソースコードがあります。
これを修正するのは骨が折れそうな作業です。</p>

<p>しかし、心配は無用です。
このような場合<code>$provide.decorator</code>が強力な武器となってくれます。
<code>$provide.decorator</code>を使うことで、すでに書いたソースコードに触れることなく対象のサービスの挙動を変更することができます。</p>

<p>本記事では、まず<code>$provide.decorator</code>の概要と簡単なチュートリアルについて説明し、
次に<code>$httpBackend</code>を置き換えてpostMessageを使ったxhr通信を行う方法を紹介します。</p>

<h2>$provide.decoratorの概要</h2>

<p><a href="https://docs.angularjs.org/api/auto/object/$provide#decorator" target="_blank"><code>$provide.decorator</code></a>
はすでに定義されているサービスの生成をフックして新しいサービスに置き換えます。</p>

<h2>簡単なチュートリアル</h2>

<p>と言ってもこれだけではなんのことかわからないので、まずは簡単な例を見てみましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;fooMod&#39;</span><span class="p">,</span> <span class="p">[]);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// &#39;hello&#39;という文字列を返すだけのサービスを定義</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">value</span><span class="p">(</span><span class="s1">&#39;helloService&#39;</span><span class="p">,</span> <span class="s1">&#39;hello&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// &#39;hello world!&#39;という文字列を返すように修正</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">config</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">$provide</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$provide</span><span class="p">.</span><span class="nx">decorator</span><span class="p">(</span><span class="s1">&#39;helloService&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$delegate</span><span class="p">,</span> <span class="nx">$log</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$log</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="s1">&#39;decorated!!&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">$delegate</span> <span class="o">+</span> <span class="s1">&#39; world!&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;MainCtrl&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">helloService</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">hello</span> <span class="o">=</span> <span class="nx">helloService</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://embed.plnkr.co/89X79o/" target="_blank">デモ</a></p>

<p>この例では以下のようなことを行っています。</p>

<ul>
<li><code>$provide</code>は<code>app</code>(AngularのModule)の<code>config</code>メソッドによってDI(dependency injection)される。</li>
<li><code>$provide.decorator</code>メソッドの第一引数にフックしたいサービスの名前を登録する。</li>
<li><code>$provide.decorator</code>メソッドの第二引数にサービスを置き換えるための関数を登録する。

<ul>
<li>この関数は<code>$provide.decorator</code>メソッドによってDIされる。</li>
<li>特に<code>$delagate</code>引数は改変前の元々のサービスがDIされる。</li>
</ul>
</li>
</ul>


<p>ここでは、Angularのモジュールの<code>value</code>メソッドで定義されたサービスを置き換えましたが、
もちろん<code>factory</code>や<code>provider</code>メソッドで定義されたサービスを置き換えることもできます。</p>

<h2><code>$httpBackend</code>を置き換えてpostMessageを使ったxhr通信を行う</h2>

<p><code>$httpBackend</code>サービスをフックして、xhrでの通信時にオリジンが違う場合、<code>postMessage</code>を使って通信するようにしてみましょう。
ここでは別オリジンで管理しているサーバーにはproxy.htmlというファイルを置き、
そこを経由してxhr通信を行うことを想定します。
※サードパーティライブラリとしてjQueryとunderscoreを使用しています。</p>

<p>クライアント側</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">,</span> <span class="p">[]).</span><span class="nx">config</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">$provide</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">iframe</span><span class="p">,</span> <span class="nx">isReady</span><span class="p">,</span> <span class="nx">isSameOrigin</span><span class="p">,</span> <span class="nx">normalize</span><span class="p">,</span> <span class="nx">uniqueId</span><span class="p">,</span> <span class="nx">waitQueue</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">iframe</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">isReady</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">uniqueId</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>  <span class="p">})(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">waitQueue</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>  <span class="nx">isReady</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">waitQueue</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// iframeの初期化</span>
</span><span class='line'>  <span class="nx">iframe</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;iframe&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">iframe</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="s2">&quot;http://foo.com/proxy.html&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">iframe</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">display</span> <span class="o">=</span> <span class="s2">&quot;none&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">iframe</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// iframeの読み込み待ち。終わったら通信待ちのものを実行する</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="nx">iframe</span><span class="p">).</span><span class="nx">one</span><span class="p">(</span><span class="s1">&#39;load&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">isReady</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">_</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">waitQueue</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">fn</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">fn</span><span class="p">();</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">isSameOrigin</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">normalize</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="o">===</span> <span class="nx">normalize</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">normalize</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">url</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">url</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/^(https?:\/\/[^:\/]+)(:\d+).*?/</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">all</span><span class="p">,</span> <span class="nx">host</span><span class="p">,</span> <span class="nx">port</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">port</span> <span class="o">===</span> <span class="s1">&#39;:80&#39;</span> <span class="o">||</span> <span class="nx">port</span> <span class="o">===</span> <span class="s1">&#39;:443&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">host</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">host</span> <span class="o">+</span> <span class="nx">port</span> <span class="o">||</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">callbacks</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="nb">window</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;message&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">data</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">callbacks</span><span class="p">[</span><span class="nx">data</span><span class="p">.</span><span class="nx">id</span><span class="p">](</span><span class="nx">data</span><span class="p">.</span><span class="nx">status</span><span class="p">,</span> <span class="nx">data</span><span class="p">.</span><span class="nx">data</span><span class="p">,</span> <span class="nx">data</span><span class="p">.</span><span class="nx">headers</span><span class="p">,</span> <span class="nx">data</span><span class="p">.</span><span class="nx">statusText</span> <span class="o">||</span> <span class="s1">&#39;&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">$provide</span><span class="p">.</span><span class="nx">decorator</span><span class="p">(</span><span class="s1">&#39;$httpBackend&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$delegate</span><span class="p">,</span> <span class="nx">$browser</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">method</span><span class="p">,</span> <span class="nx">url</span><span class="p">,</span> <span class="nx">post</span><span class="p">,</span> <span class="nx">callback</span><span class="p">,</span> <span class="nx">headers</span><span class="p">,</span> <span class="nx">timeout</span><span class="p">,</span> <span class="nx">withCredentials</span><span class="p">,</span> <span class="nx">responseType</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">exec</span><span class="p">,</span> <span class="nx">id</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// オリジン判定。同一オリジンの場合は元の$httpBackendを使う</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="sr">/^http/</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">url</span><span class="p">)</span> <span class="o">||</span> <span class="nx">isSameOrigin</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="nx">$browser</span><span class="p">.</span><span class="nx">url</span><span class="p">()))</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">$delegate</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">id</span> <span class="o">=</span> <span class="nx">uniqueId</span><span class="p">();</span>
</span><span class='line'>      <span class="nx">callbacks</span><span class="p">[</span><span class="nx">id</span><span class="p">]</span> <span class="o">=</span> <span class="nx">callback</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// postMessageを使って通信を行います</span>
</span><span class='line'>      <span class="nx">exec</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">iframe</span><span class="p">.</span><span class="nx">contentWindow</span><span class="p">.</span><span class="nx">postMessage</span><span class="p">(</span><span class="nx">angular</span><span class="p">.</span><span class="nx">toJson</span><span class="p">({</span>
</span><span class='line'>          <span class="nx">id</span><span class="o">:</span> <span class="nx">id</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">method</span><span class="o">:</span> <span class="nx">method</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">url</span><span class="o">:</span> <span class="nx">url</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">post</span><span class="o">:</span> <span class="nx">post</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">headers</span><span class="o">:</span> <span class="nx">headers</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">timeout</span><span class="o">:</span> <span class="nx">timeout</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">withCredentials</span><span class="o">:</span> <span class="nx">withCredentials</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">responseType</span><span class="o">:</span> <span class="nx">responseType</span>
</span><span class='line'>        <span class="p">}),</span> <span class="s1">&#39;*&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">isReady</span> <span class="o">?</span> <span class="nx">exec</span><span class="p">()</span> <span class="o">:</span> <span class="nx">waitQueue</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">exec</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>proxy.html</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!doctype html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;title&gt;</span>postMessage proxy<span class="nt">&lt;/title&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'><span class="nt">&lt;script&gt;</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nb">window</span><span class="p">.</span><span class="nx">on</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>  <span class="nb">window</span><span class="p">.</span><span class="nx">on</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">fn</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">window</span><span class="p">.</span><span class="nx">attachEvent</span><span class="p">(</span><span class="s1">&#39;on&#39;</span> <span class="o">+</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">fn</span><span class="p">);</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">send</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">parent</span><span class="p">.</span><span class="nx">postMessage</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">data</span><span class="p">),</span> <span class="s1">&#39;*&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;message&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">origin</span> <span class="o">!==</span> <span class="s1">&#39;foo.com&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//はじく処理</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">data</span><span class="p">),</span>
</span><span class='line'>      <span class="nx">headers</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">headers</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">xhr</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">xhr</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">method</span><span class="p">,</span> <span class="nx">data</span><span class="p">.</span><span class="nx">url</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// add headers</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">k</span> <span class="k">in</span> <span class="nx">headers</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">headers</span><span class="p">,</span> <span class="nx">k</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">xhr</span><span class="p">.</span><span class="nx">setRequestHeader</span><span class="p">(</span><span class="nx">k</span><span class="p">,</span> <span class="nx">headers</span><span class="p">[</span><span class="nx">k</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">withCredentials</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">xhr</span><span class="p">.</span><span class="nx">withCredentials</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">withCredentials</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">xhr</span><span class="p">.</span><span class="nx">onreadystatechange</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">xhr</span><span class="p">.</span><span class="nx">readyState</span> <span class="o">==</span> <span class="mi">4</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">send</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">id</span><span class="o">:</span> <span class="nx">data</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">status</span><span class="o">:</span> <span class="nx">xhr</span><span class="p">.</span><span class="nx">status</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">data</span><span class="o">:</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">xhr</span><span class="p">.</span><span class="nx">responseText</span><span class="p">),</span>
</span><span class='line'>        <span class="nx">headers</span><span class="o">:</span> <span class="nx">xhr</span><span class="p">.</span><span class="nx">getAllResponseHeaders</span><span class="p">(),</span>
</span><span class='line'>        <span class="nx">statusText</span><span class="o">:</span> <span class="nx">xhr</span><span class="p">.</span><span class="nx">statusText</span>
</span><span class='line'>      <span class="p">},</span> <span class="nx">e</span><span class="p">.</span><span class="nx">origin</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>  <span class="nx">xhr</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">post</span> <span class="o">||</span> <span class="kc">null</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>$httpBackend</code>サービスは<code>$provide.decorator</code>を使うのに最も適しているサービスの一つと言えます。
AngularJSではインターフェース部分やクエリ文字列の生成等を<code>$http</code>や<code>$resource</code>、実際に通信を行う部分を<code>$httpBackend</code>に分離してるので
<code>$httpBackend</code>の挙動を変えるだけで全ての通信をpostMessageで行うことができます。
既存のサービスやコントローラー等で<code>$http</code>や<code>$resource</code>を使っている部分を書き換える必要はありません。</p>

<h2>まとめ</h2>

<p>本記事では<code>$provide.decorator</code>の概要や使用例を学びました。これは主に</p>

<ul>
<li>サービスのプロパティを変更・追加する。</li>
<li>サービスの挙動を変える。</li>
</ul>


<p>のような目的で使用されます。</p>

<ul>
<li>元のサービスのソースコードを直接触らなくてもよい。</li>
<li>サービスの使っている側のソースコードを変更することなくサービスの挙動を変える事ができる。</li>
</ul>


<p>といった利点があります。</p>

<h2>参考URL</h2>

<ul>
<li><a href="https://docs.angularjs.org/api/auto/object/$provide#decorator" target="_blank">AngularJS: API: $provide.decorator</a>
公式リファレンス</li>
<li><a href="https://egghead.io/lessons/angularjs-provide-decorator" target="_blank">$provide.decorator &ndash; AngularJS Video Tutorial #free @eggheadio</a>
<code>$provide.decorator</code>のチュートリアル動画</li>
<li><a href="http://www.slideshare.net/damienklinnert/angular-decorate" target="_blank">Angular decorate</a>
decoratorの略記法について</li>
<li><a href="http://angular-tips.com/blog/2013/09/experiment-decorating-directives/" target="_blank">Experiment: decorating directives &ndash; Angular Tips</a></li>
<li><a href="http://briantford.com/blog/angular-hacking-core" target="_blank">Brian Ford &ndash; Hacking Core Directives in AngularJS</a>
ディレクティブ置き換え、AngularJSのコアに手を加える方法</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[waculで使用しているnode.jsのライブラリ]]></title>
    <link href="http://blog.wacul.co.jp//blog/2014/05/14/nodejs-library/"/>
    <updated>2014-05-14T13:50:00+09:00</updated>
    <id>http://blog.wacul.co.jp//blog/2014/05/14/nodejs-library</id>
    <content type="html"><![CDATA[<h2>node.jsでの開発</h2>

<p>現在、waculで自社開発を行っているプロジェクトにおいて、サーバ側はnode.jsで構築しています。
webフレームワークはExpressを、DBはmongoDBを採用しています。</p>

<p>今回は、我々が開発で利用しているJavaScriptのライブラリを紹介したいと思います。</p>

<h3><a href='http://coffeescript.org/' target='_blank'>CoffeeScript</a></h3>

<p>CoffeeScript自体を紹介するまでもありませんが、綺麗に簡潔に書けるのは良いことです。</p>

<h3><a href='https://github.com/remy/nodemon' target='_blank'>nodemon</a></h3>

<p>ソースを変更したときに、node.jsのアプリケーションを起動しなおしてくれます。<br/>
CoffeeScriptにも対応しています。</p>

<h3><a href='http://mongoosejs.com/' target='_blank'>mongoose</a></h3>

<p>node.jsからmongoDBにアクセスするためのライブラリです。</p>

<h3><a href='https://www.npmjs.org/package/mpath' target='_blank'>mpath</a></h3>

<p>mongoDBで使うパス指定でJavaSciptのオブジェクトにアクセスできます。</p>

<h3><a href='http://aws.amazon.com/jp/sdkfornodejs/' target='_blank'>AWS SDK for JavaScript</a></h3>

<p>プロジェクトではAWSのSQSやS3などを使用していますが、それらに簡単にアクセスするため、amazon謹製のnode.js用のライブラリを使用しています。</p>

<h3><a href='https://github.com/lorenwest/node-config' target='_blank'>node-config</a></h3>

<p>環境変数によって、ローカル、テストサーバ、本番など環境を分けるために使用しています。<br/>
それぞれの環境ごとに設定値を変えられるので便利です。</p>

<h3><a href='https://github.com/goodeggs/fibrous' target='_blank'>fibrous</a></h3>

<p>jsの非同期処理を同期的に書けるようになります。これでコールバックのネストが深くなるのを防ぎ、可読性が良くなります。</p>

<h3><a href='https://github.com/bruce/node-temp' target='_blank'>node-temp</a></h3>

<p>テンポラリーなフォルダを作って、ファイルの読み書きができます。ダウンロードしたファイルを一時的に保存する用途に使用しています。</p>

<h3><a href='https://github.com/rsms/node-imagemagick' target='_blank'>node-imagemagick</a></h3>

<p>画像を扱うためのライブラリであるImageMagickをnode.jsから使えるようにするライブラリです。</p>

<h3><a href='https://github.com/mikeal/request' target='_blank'>request</a></h3>

<p>httpリクエストを簡単に行えるライブラリです。</p>

<h3><a href='http://visionmedia.github.io/mocha/' target='_blank'>mocha</a></h3>

<p>テストフレームワークです。</p>

<h3><a href='https://github.com/chaijs/chai' target='_blank'>chai</a></h3>

<p>テスト時の値比較に使用しているライブラリです。</p>

<h3><a href='https://github.com/visionmedia/supertest' target='_blank'>SuperTest</a></h3>

<p>テスト時にhttpリクエストするのに使用しています。名前がかっこいい。</p>

<h3><a href='https://github.com/visionmedia/node-querystring' target='_blank'>node-querystring</a></h3>

<p>オブジェクトをクエリパラメータにしてくれるライブラリです。</p>

<h3><a href='https://github.com/tutuming/async-validator' target='_blank'>async-validator</a></h3>

<p>弊社、包が作成したバリデーションライブラリです。ブラウザでも動きます。</p>

<h3><a href='http://lodash.com/' target='_blank'>Lo-Dash</a></h3>

<p>これも言わずもがな、便利なJavaScriptのライブラリです。オブジェクトや配列の操作がずっと簡単になります。</p>

<h3><a href='http://momentjs.com/' target='_blank'>Moment.js</a></h3>

<p>JavaScriptにおいて時間の計算を行うのには、これがないとつらいです。</p>

<p>以上です！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOSアプリで Programmable な自動レイアウト(NSLayoutConstraint)]]></title>
    <link href="http://blog.wacul.co.jp//blog/2014/05/07/nslayoutconstraint/"/>
    <updated>2014-05-07T17:00:00+09:00</updated>
    <id>http://blog.wacul.co.jp//blog/2014/05/07/nslayoutconstraint</id>
    <content type="html"><![CDATA[<p>はじめまして、プログラマチームの kyoh です。
最近は津軽金山焼(<a href="https://www.youtube.com/watch?v=lITs5D8XW5M#t=20" target="_blank">PV:YouTube</a>)に惚れてます。</p>

<h2>背景</h2>

<p>ワカルでは現在、RubyMotionを使ってiPadアプリを開発中です。
プロジェクトとして「InterfaceBuilderを使わない」という選択をした結果、より自由度の高い NSLayoutConstraint の魅力がわかってきました。
これはもったいない、世の中的にももっと使ってもらえるように、とこの記事を書くに至った次第です。</p>

<p>Objective-C はちょっと・・・というスタンスなので、ソースコードは全てRubyで書いています。すみません。</p>

<h2>結論</h2>

<p><del>InterfaceBuilderを使わない変態</del><ins>算数が好きな</ins>プログラマーは NSLayoutConstraint.constraintWithItem&hellip; をガシガシ使おう！CSS風に書ける快感を皆で味わおう！
メソッド名が長い？記述が読みにくい？それなら<a href="https://github.com/kyoh/LayoutExpress" target="_blank">LayoutExpress</a>でどうだっ！（自薦）</p>

<h2>NSLayoutConstraint の機能</h2>

<p>NSLayoutConstraint という名前の通り、ビューの位置やサイズを他のビューの位置やサイズに従って制約（constrain）することで、自動レイアウトする機能を提供しています。
例えば、親ビューの幅が変わったら子のビューの幅も従属する、というような場合も、いちいちユーザーのアクションに従ってframeを再設定する必要が<strong>ありません</strong>。</p>

<p>NSLayoutConstraint には、2つのクラスメソッドが用意されています。</p>

<ul>
<li>constraintsWithVisualFormat:options:metrics:views:
<a href="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/AutolayoutPG/VisualFormatLanguage/VisualFormatLanguage.html#//apple_ref/doc/uid/TP40010853-CH3" target="_blank">Visual Format Language</a> （以下、<abbr>VFL</abbr>）を使って、可視的にレイアウトを記述できます。
比較的簡単、かつ他所でも記事が充実<small>(<a href="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/AutolayoutPG/VisualFormatLanguage/VisualFormatLanguage.html#//apple_ref/doc/uid/TP40010853-CH3" target="_blank">例1</a>,<a href="http://blogios.stack3.net/archives/98" target="_blank">例2</a>,<a href="http://commandshift.co.uk/blog/2013/01/31/visual-format-language-for-autolayout/" target="_blank">例3</a>)</small>しているのでここではこちらの詳しい説明は割愛します。</li>
<li>constraintWithItem:attribute:relatedBy:toItem:attribute:multiplier:constant:
めまいのする長さのメソッドですが、こちらが今回の記事の要です。</li>
</ul>


<h2>constraintWithItem&hellip;の使い方</h2>

<p>引数が多い上に名前が長く、そして<a href="https://developer.apple.com/library/ios/documentation/AppKit/Reference/NSLayoutConstraint_Class/NSLayoutConstraint/NSLayoutConstraint.html" target="_blank">公式ドキュメント</a>の記述が複雑であるがゆえに、障壁の高いこちら。
ですが、落ち着いて紐解いてみればさほど難しいことをやっているわけではありません。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">NSLayoutConstraint</span><span class="o">.</span><span class="n">constraintWithItem</span><span class="p">(</span><span class="n">view1</span><span class="p">,</span> <span class="ss">attribute</span><span class="p">:</span><span class="n">attr1</span><span class="p">,</span> <span class="ss">relatedBy</span><span class="p">:</span><span class="n">relation</span><span class="p">,</span> <span class="ss">toItem</span><span class="p">:</span><span class="n">view2</span><span class="p">,</span> <span class="ss">attribute</span><span class="p">:</span><span class="n">attr2</span><span class="p">,</span> <span class="ss">multiplier</span><span class="p">:</span><span class="n">multiplier</span><span class="p">,</span> <span class="ss">constant</span><span class="p">:</span><span class="n">constant</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>・・・うーん、長い。このメソッドで作ることができるのは、次のような制約です。</p>

<blockquote><p><strong>view1</strong>.<strong>attr1</strong> [<strong>＝</strong>|<strong>≦</strong>|<strong>≧</strong>] <strong>view2</strong>.<strong>attr2</strong> × multiplier ＋ constant</p></blockquote>

<ul>
<li><strong>view1</strong> の属性 <strong>attr1</strong> を、<strong>view2</strong> の属性 <strong>attr2</strong> に従って制約する。

<ul>
<li><strong>逆ではない（view2 を制約するものではない）ので注意</strong></li>
<li>サイズや位置を単なる数値で指定したい場合、view2 に nil を指定すればいい。</li>
</ul>
</li>
<li>attr1, attr2 は、幅(width)、高さ(height)、位置(left / right / top / bottom / centerX / centerY)、などがある。</li>
<li><strong>relation</strong> には、等値（＝）、以下（≦）、以上（≧）の3種類がある。</li>
<li>view2 の属性 attr2 の◯◯倍、という指定ができるのが <strong>multiplier</strong> 。</li>
<li>view2 の属性 attr2 ＋◯◯、という指定ができるのが <strong>constant</strong> 。</li>
</ul>


<p>ただし、使う際には少しだけ注意するポイントがあります。</p>

<ul>
<li>attr1 と attr2 に、位置とサイズの組み合わせは指定できない。

<ul>
<li>例えば、attr1: NSLayoutAttributeLeft（左側の位置）, &hellip; attr2: NSLayoutAttributeWidth（幅） はエラー。</li>
</ul>
</li>
<li>位置の指定をする場合、view2 に nil を指定することはできない。

<ul>
<li>当然といえば当然ですが、位置の指定では基準となるViewを指定する必要があります。</li>
</ul>
</li>
</ul>


<p>これらはVFLでも当然指定できません。(指定する方法も無いでしょうが・・・)</p>

<h2>constraintWithItem&hellip;の持つ能力</h2>

<p>さて、実のところ、constraintWithItem と constraintsWithVisualFormat のできることに<strong>大きな違いはありません</strong>。
しかし逆に言えば、少ないながらもVFLでは書けないレイアウトがあります。
今までに私が気づいた範囲内で VFL を超えている部分としては、次があります。</p>

<h3>width と height を組み合わせた制約</h3>

<p>例）幅：高さ＝4:3のビュー</p>

<p><img src="http://blog.wacul.co.jp//images/2014-05-07-nslayoutconstraint/layout_fixed_ratio.png" alt="UIView @viewの中に、UIImageView @imageView が配置されていて、UIImageViewの幅：高さが4:3に固定される" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="vi">@imageView</span><span class="o">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>  <span class="vi">@view</span><span class="o">.</span><span class="n">addConstraints</span><span class="p">(</span><span class="o">[</span>
</span><span class='line'>    <span class="no">NSLayoutConstraint</span><span class="o">.</span><span class="n">constraintWithItem</span><span class="p">(</span>
</span><span class='line'>      <span class="vi">@imageView</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">attribute</span><span class="p">:</span> <span class="no">NSLayoutAttributeLeft</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">relatedBy</span><span class="p">:</span><span class="no">NSLayoutRelationEqual</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">toItem</span><span class="p">:</span><span class="vi">@view</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">attribute</span><span class="p">:</span><span class="no">NSLayoutAttributeLeft</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">multiplier</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">constant</span><span class="p">:</span><span class="mi">60</span>
</span><span class='line'>    <span class="p">),</span>
</span><span class='line'>    <span class="no">NSLayoutConstraint</span><span class="o">.</span><span class="n">constraintWithItem</span><span class="p">(</span>
</span><span class='line'>      <span class="vi">@imageView</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">attribute</span><span class="p">:</span> <span class="no">NSLayoutAttributeRight</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">relatedBy</span><span class="p">:</span><span class="no">NSLayoutRelationEqual</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">toItem</span><span class="p">:</span><span class="vi">@view</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">attribute</span><span class="p">:</span><span class="no">NSLayoutAttributeRight</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">multiplier</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">constant</span><span class="p">:</span><span class="o">-</span><span class="mi">60</span>
</span><span class='line'>    <span class="p">),</span>
</span><span class='line'>    <span class="no">NSLayoutConstraint</span><span class="o">.</span><span class="n">constraintWithItem</span><span class="p">(</span>
</span><span class='line'>      <span class="vi">@imageView</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">attribute</span><span class="p">:</span> <span class="no">NSLayoutAttributeHeight</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">relatedBy</span><span class="p">:</span><span class="no">NSLayoutRelationEqual</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">toItem</span><span class="p">:</span><span class="vi">@imageView</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">attribute</span><span class="p">:</span><span class="no">NSLayoutAttributeWidth</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">multiplier</span><span class="p">:</span><span class="mi">3</span><span class="o">.</span><span class="mi">0</span><span class="o">/</span><span class="mi">4</span><span class="p">,</span>       <span class="c1"># imageView の高さを、imageView 自身の幅の3/4に固定する</span>
</span><span class='line'>      <span class="ss">constant</span><span class="p">:</span><span class="mi">0</span>
</span><span class='line'>    <span class="p">),</span>
</span><span class='line'>  <span class="o">]</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>一定サイズ重なりあう様な制約</h3>

<p>例）幅60、高さ40の領域が重なる @label と @imageView
<img src="http://blog.wacul.co.jp//images/2014-05-07-nslayoutconstraint/layout_layered_fields.png" alt="UIView @viewの中に、UILabel @label と UIImageView @imageView が配置されていて、@label の右下 60x40 の領域が下の @imageView に重なっている" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="vi">@label</span><span class="o">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>  <span class="vi">@imageView</span><span class="o">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>  <span class="vi">@view</span><span class="o">.</span><span class="n">addConstraints</span><span class="p">(</span><span class="o">[</span>
</span><span class='line'>    <span class="no">NSLayoutConstraint</span><span class="o">.</span><span class="n">constraintWithItem</span><span class="p">(</span>
</span><span class='line'>      <span class="vi">@imageView</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">attribute</span><span class="p">:</span> <span class="no">NSLayoutAttributeTop</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">relatedBy</span><span class="p">:</span><span class="no">NSLayoutRelationEqual</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">toItem</span><span class="p">:</span><span class="vi">@label</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">attribute</span><span class="p">:</span><span class="no">NSLayoutAttributeBottom</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">multiplier</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">constant</span><span class="p">:</span><span class="o">-</span><span class="mi">40</span>
</span><span class='line'>    <span class="p">),</span>
</span><span class='line'>    <span class="no">NSLayoutConstraint</span><span class="o">.</span><span class="n">constraintWithItem</span><span class="p">(</span>
</span><span class='line'>      <span class="vi">@imageView</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">attribute</span><span class="p">:</span> <span class="no">NSLayoutAttributeLeft</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">relatedBy</span><span class="p">:</span><span class="no">NSLayoutRelationEqual</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">toItem</span><span class="p">:</span><span class="vi">@label</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">attribute</span><span class="p">:</span><span class="no">NSLayoutAttributeRight</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">multiplier</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">constant</span><span class="p">:</span><span class="o">-</span><span class="mi">60</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>  <span class="o">]</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>位置に対して multiplier を使う様な制約</h3>

<p>例）View 全体の幅を等分するSubview
<img src="http://blog.wacul.co.jp//images/2014-05-07-nslayoutconstraint/layout_equal_spaces.png" alt="UIView @viewの中に、複数の subview があって、それぞれ均等な領域に割り当てられている。" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">delta</span> <span class="o">=</span> <span class="mi">2</span><span class="o">.</span><span class="mi">0</span> <span class="o">/</span> <span class="n">subviews</span><span class="o">.</span><span class="n">count</span>
</span><span class='line'><span class="n">centerN</span> <span class="o">=</span> <span class="n">delta</span> <span class="o">/</span> <span class="mi">2</span>
</span><span class='line'><span class="n">subviews</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">r</span><span class="o">|</span>
</span><span class='line'>  <span class="vi">@view</span><span class="o">.</span><span class="n">addConstraints</span><span class="p">(</span><span class="o">[</span>
</span><span class='line'>    <span class="no">NSLayoutConstraint</span><span class="o">.</span><span class="n">constraintWithItem</span><span class="p">(</span>
</span><span class='line'>      <span class="n">r</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">attribute</span><span class="p">:</span><span class="no">NSLayoutAttributeCenterX</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">relatedBy</span><span class="p">:</span><span class="no">NSLayoutRelationEqual</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">toItem</span><span class="p">:</span><span class="vi">@view</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">attribute</span><span class="p">:</span><span class="no">NSLayoutAttributeCenterX</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">multiplier</span><span class="p">:</span><span class="n">centerN</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">constant</span><span class="p">:</span><span class="mi">0</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>    <span class="no">NSLayoutConstraint</span><span class="o">.</span><span class="n">constraintWithItem</span><span class="p">(</span>
</span><span class='line'>      <span class="n">r</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">attribute</span><span class="p">:</span><span class="no">NSLayoutAttributeCenterY</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">relatedBy</span><span class="p">:</span><span class="no">NSLayoutRelationEqual</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">toItem</span><span class="p">:</span><span class="vi">@view</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">attribute</span><span class="p">:</span><span class="no">NSLayoutAttributeCenterY</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">multiplier</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">constant</span><span class="p">:</span><span class="mi">0</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>  <span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="n">centerN</span> <span class="o">+=</span> <span class="n">delta</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>まとめ</h2>

<p>若干複雑なconstraintWithItem&hellip;ですが、いかがでしょう。やっていることはとてもシンプルなので、読み解くにはさほど難しいものではありません。
そして、VFLだけではできないオートレイアウトの深淵を覗いてみれば、これまでは「実装上の都合」で諦めてきた
複雑なレイアウトも、チャレンジしてみる価値があるのではないでしょうか。</p>

<p>難しい！嫌だ！と完全拒絶する前に、一度使ってみることをおすすめします。
以外に優しいやつなんです。</p>

<h2>おまけ</h2>

<p>本題とはちょっとずれるので、付記として2つほど。</p>

<h3>NSLayoutConstraint.constant の秘密</h3>

<p>VFLを使っていると中々気づけないことがあります。
NSLayoutConstraint の ほとんどのプロパティは読み取り専用ですが、constant プロパティだけは<strong>後から変更することができる</strong>のです。
つまり、constraintWithItem&hellip;で課した制約に対して、ユーザの操作などに応じて値を変えることができます。</p>

<p>例）ユーザがフォーカスした時に40pxだけ大きくなるTextField</p>

<ul>
<li>初期化時</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@textField</span><span class="o">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'><span class="c1"># constraintWithItem は、NSLayoutConstraint を単体で返すので、このように変数に取っておくことも容易です。</span>
</span><span class='line'><span class="vi">@textWidthConstraint</span> <span class="o">=</span> <span class="no">NSLayoutConstraint</span><span class="o">.</span><span class="n">constraintWithItem</span><span class="p">(</span>
</span><span class='line'>  <span class="vi">@textField</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">attribute</span><span class="p">:</span> <span class="no">NSLayoutAttributeWidth</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">relatedBy</span><span class="p">:</span><span class="no">NSLayoutRelationEqual</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">toItem</span><span class="p">:</span><span class="kp">nil</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">attribute</span><span class="p">:</span><span class="no">NSLayoutAttributeNotAnAttribute</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">multiplier</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">constant</span><span class="p">:</span><span class="mi">120</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="vi">@view</span><span class="o">.</span><span class="n">addConstraints</span><span class="p">(</span><span class="o">[</span>
</span><span class='line'>  <span class="vi">@textWidthConstraint</span>
</span><span class='line'>  <span class="c1">#... 実際はより多くの制約が必要でしょうが、割愛します。</span>
</span><span class='line'><span class="o">]</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>ユーザの操作時</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># TextFieldDelegateProtocol::textFieldShouldBeginEditing</span>
</span><span class='line'><span class="k">def</span> <span class="nf">textFieldShouldBeginEditing</span><span class="p">(</span><span class="n">textField</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># せっかくなのでアニメーションさせてみます。</span>
</span><span class='line'>  <span class="no">UIView</span><span class="o">.</span><span class="n">animateWithDuration</span><span class="p">(</span><span class="no">KCLRadioCheckAnimationDuration</span><span class="p">,</span> <span class="ss">animations</span><span class="p">:</span> <span class="nb">lambda</span> <span class="p">{</span>
</span><span class='line'>    <span class="vi">@textWidthConstraint</span><span class="o">.</span><span class="n">constant</span> <span class="o">=</span> <span class="mi">160</span> <span class="c1"># 制約のconstant値だけ書き換えます。</span>
</span><span class='line'>    <span class="vi">@view</span><span class="o">.</span><span class="n">layoutIfNeeded</span> <span class="c1"># 制約を変えた場合は、layoutIfNeeded を呼んでおきます。</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>  <span class="k">return</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1"># TextFieldDelegateProtocol::textFieldShouldEndEditing</span>
</span><span class='line'><span class="k">def</span> <span class="nf">textFieldShouldEndEditing</span><span class="p">(</span><span class="n">textField</span><span class="p">)</span>
</span><span class='line'>  <span class="no">UIView</span><span class="o">.</span><span class="n">animateWithDuration</span><span class="p">(</span><span class="no">KCLRadioCheckAnimationDuration</span><span class="p">,</span> <span class="ss">animations</span><span class="p">:</span> <span class="nb">lambda</span> <span class="p">{</span>
</span><span class='line'>    <span class="vi">@textWidthConstraint</span><span class="o">.</span><span class="n">constant</span> <span class="o">=</span> <span class="mi">120</span> <span class="c1"># 元の幅に戻します。</span>
</span><span class='line'>    <span class="vi">@view</span><span class="o">.</span><span class="n">layoutIfNeeded</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>  <span class="k">return</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>それでもやっぱり書きづらい</h3>

<p>入力補完やlinterがあればさほど困ることはないんでしょうが、それでもやたらと長いクラス名、メソッド名、引数名が続いてうんざりする、という方には、拙作ながら <a href="https://github.com/kyoh/LayoutExpress" target="_blank">LayoutExpress</a>を自薦させていただきます。
RubyMotion での開発向けに、<strong>レイアウトを数式の様に書く</strong> ことができるライブラリです。</p>

<p>例として、先に挙げた幅：高さ＝4:3のビューを LayoutExpress に置き換えたものがこちらです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">layout</span><span class="p">(</span>
</span><span class='line'>    <span class="n">leftOf</span><span class="p">(</span><span class="vi">@imageView</span><span class="p">)</span> <span class="o">==</span> <span class="n">leftOf</span><span class="p">(</span><span class="vi">@view</span><span class="p">)</span> <span class="o">+</span> <span class="mi">60</span><span class="p">,</span>
</span><span class='line'>    <span class="n">rightOf</span><span class="p">(</span><span class="vi">@imageView</span><span class="p">)</span> <span class="o">==</span> <span class="n">rightOf</span><span class="p">(</span><span class="vi">@view</span><span class="p">)</span> <span class="o">-</span> <span class="mi">60</span><span class="p">,</span>
</span><span class='line'>    <span class="n">heightOf</span><span class="p">(</span><span class="vi">@imageView</span><span class="p">)</span> <span class="o">==</span> <span class="n">widthOf</span><span class="p">(</span><span class="vi">@imageView</span><span class="p">)</span> <span class="o">*</span> <span class="mi">3</span><span class="o">.</span><span class="mi">0</span> <span class="o">/</span> <span class="mi">4</span>
</span><span class='line'>  <span class="o">]</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>これで皆さんが NSLayoutConstraint を使ってくれることを祈って。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Canvasのお絵かきに bacon.js を使ってみた]]></title>
    <link href="http://blog.wacul.co.jp//blog/2014/04/30/bacon-js/"/>
    <updated>2014-04-30T19:00:00+09:00</updated>
    <id>http://blog.wacul.co.jp//blog/2014/04/30/bacon-js</id>
    <content type="html"><![CDATA[<h3>イベント処理の憂鬱とbacon.js</h3>

<p>業務でちょっとしたお絵かきツールをjsで作る機会がありました。<br/>
マウスのイベントを拾ってcanvasに描画する、それだけの処理なのですが、イベントのハンドリングとペンの状態などが絡むと、結構メンテがしづらいソースになってしまいます。</p>

<p>これを綺麗に書く方法はないか、調べている中で、<a href="http://baconjs.github.io" target="_blank">bacon.js</a> というライブラリを見つけました。試してみたところなかなか良さそうだったのでご紹介します。</p>

<p>bacon.js はFRP(Functional Reactive Programming) という概念をjsで実装したもので、僕なりの理解だと、</p>

<ul>
<li>変化するイベントや値 (EventStream, Property) をオブジェクトとして扱うことができる</li>
<li>イベントや値の間に関係を持たせることができる 例: b = a + 1</li>
<li>元の値が変わると、関係する値も自動的に更新される 例: a が 1 &ndash;> 2 に変化すると、bは 2 &ndash;> 3 に変化する (Reactive)</li>
<li>値の変換を関数として記述できる (Functional)</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">//例: c は a + b </span>
</span><span class='line'><span class="nx">c</span> <span class="o">=</span> <span class="nx">a</span><span class="p">.</span><span class="nx">combine</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">){</span> <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span> <span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>といった特徴があります。<br/>
FRPの概念については、そんなに深追いしてないのですが、FRPをiOS/OSXのCocoa APIの上に実装した
<a href="https://github.com/ReactiveCocoa/ReactiveCocoa" target="_blank">ReactiveCocoa</a>などのライブラリもあります。</p>

<h3>お絵かきアプリを bacon.js で実装してみる</h3>

<p>さて、今回はお絵かきアプリのサンプルをbacon.jsを使って書いてみました。</p>

<p><a href="http://tutuming.github.io/bacon-sample/" target="_blank">動いているデモ</a><br/>
<a href="https://github.com/tutuming/bacon-sample/blob/master/sample.js" target="_blank">ソースコード(github)</a></p>

<p>機能としては以下を実装しています</p>

<ul>
<li>マウス、タッチイベント両方で描画できる</li>
<li>色、太さを選択できる</li>
</ul>


<p>使っているライブラリは、jQuery, bacon.js, bacon.UI.JS（ jQueryのイベントをbacon.jsで扱うためのライブラリ）です。</p>

<h4>マウス、タッチイベントから、描画に必要な座標の流れに変換する</h4>

<p>描画に必要な情報は、描画に必要な座標の変化の流れです。
時間にそって、x,yの組が変化していくストリームを抽象化し、そのストリームを描画する処理と切り離します。</p>

<p>ここが少しどう実装するか迷ったポイントだったのですが、
描画には開始と終了があるので、<strong> 一連のx,y座標のストリームを返すストリーム </strong> として実装するとうまくいくことがわかりました。</p>

<p>sample.js:L9-21 エレメントに対するマウスのイベントからx,y 座標の組のストリームを生成するストリームを返す関数を定義しています</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'> <span class="c1">// マウスでの描画座標ストリーム生成</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">mouseDrawStreamSource</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">element</span><span class="p">){</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">$</span><span class="p">(</span><span class="nx">element</span><span class="p">).</span><span class="nx">asEventStream</span><span class="p">(</span><span class="s1">&#39;mousedown&#39;</span><span class="p">).</span><span class="nx">doAction</span><span class="p">(</span><span class="s1">&#39;.preventDefault&#39;</span><span class="p">).</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">asEventStream</span><span class="p">(</span><span class="s1">&#39;mousemove&#39;</span><span class="p">).</span><span class="nx">doAction</span><span class="p">(</span><span class="s1">&#39;.preventDefault&#39;</span><span class="p">).</span><span class="nx">takeUntil</span><span class="p">(</span>
</span><span class='line'>        <span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">asEventStream</span><span class="p">(</span><span class="s1">&#39;mouseup&#39;</span><span class="p">).</span><span class="nx">doAction</span><span class="p">(</span><span class="s1">&#39;.preventDefault&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">).</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">offset</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nx">element</span><span class="p">).</span><span class="nx">offset</span><span class="p">();</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">x</span> <span class="o">:</span> <span class="nx">e</span><span class="p">.</span><span class="nx">pageX</span> <span class="o">-</span> <span class="nx">offset</span><span class="p">.</span><span class="nx">left</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">y</span> <span class="o">:</span> <span class="nx">e</span><span class="p">.</span><span class="nx">pageY</span> <span class="o">-</span> <span class="nx">offset</span><span class="p">.</span><span class="nx">top</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>sample.js:L24-55 タッチイベントに関しても同じインターフェイスのストリームを返せるような関数を書きます</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="c1">// タッチでの描画座標ストリーム生成</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">touchDrawStreamSource</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">element</span><span class="p">){</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">$</span><span class="p">(</span><span class="nx">element</span><span class="p">).</span><span class="nx">asEventStream</span><span class="p">(</span><span class="s1">&#39;touchstart&#39;</span><span class="p">).</span><span class="nx">doAction</span><span class="p">(</span><span class="s1">&#39;.preventDefault&#39;</span><span class="p">).</span><span class="nx">flatMap</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">Bacon</span><span class="p">.</span><span class="nx">fromArray</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">originalEvent</span><span class="p">.</span><span class="nx">changedTouches</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}).</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">touch</span><span class="p">){</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">filterEventContainesTouch</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">stream</span><span class="p">){</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">stream</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span>
</span><span class='line'>          <span class="s1">&#39;.originalEvent.changedTouches&#39;</span>
</span><span class='line'>        <span class="p">).</span><span class="nx">filter</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">touches</span><span class="p">){</span>
</span><span class='line'>          <span class="k">return</span> <span class="nx">_</span><span class="p">(</span><span class="nx">touches</span><span class="p">).</span><span class="nx">contains</span><span class="p">(</span><span class="nx">touch</span><span class="p">)</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>      <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">endStream</span> <span class="o">=</span> <span class="nx">filterEventContainesTouch</span><span class="p">(</span><span class="nx">Bacon</span><span class="p">.</span><span class="nx">mergeAll</span><span class="p">([</span>
</span><span class='line'>        <span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">asEventStream</span><span class="p">(</span><span class="s1">&#39;touchend&#39;</span><span class="p">).</span><span class="nx">doAction</span><span class="p">(</span><span class="s1">&#39;.preventDefault&#39;</span><span class="p">),</span>
</span><span class='line'>        <span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">asEventStream</span><span class="p">(</span><span class="s1">&#39;touches&#39;</span><span class="p">).</span><span class="nx">doAction</span><span class="p">(</span><span class="s1">&#39;.preventDefault&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">]));</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="nx">filterEventContainesTouch</span><span class="p">(</span>
</span><span class='line'>        <span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">asEventStream</span><span class="p">(</span><span class="s1">&#39;touchmove&#39;</span><span class="p">).</span><span class="nx">doAction</span><span class="p">(</span>
</span><span class='line'>          <span class="s1">&#39;.preventDefault&#39;</span>
</span><span class='line'>        <span class="p">).</span><span class="nx">takeUntil</span><span class="p">(</span>
</span><span class='line'>          <span class="nx">endStream</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>      <span class="p">).</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">offset</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nx">element</span><span class="p">).</span><span class="nx">offset</span><span class="p">();</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">x</span> <span class="o">:</span> <span class="nx">touch</span><span class="p">.</span><span class="nx">pageX</span> <span class="o">-</span> <span class="nx">offset</span><span class="p">.</span><span class="nx">left</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">y</span> <span class="o">:</span> <span class="nx">touch</span><span class="p">.</span><span class="nx">pageY</span> <span class="o">-</span> <span class="nx">offset</span><span class="p">.</span><span class="nx">top</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>sample.js:L57-59 それぞれのストリームをcanvasから生成して、マウス、タッチの入力を両方とも受け付けられるように、２つのストリームを統合します</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="kd">var</span> <span class="nx">mouseStreamSource</span> <span class="o">=</span> <span class="nx">mouseDrawStreamSource</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#canvas&#39;</span><span class="p">));</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">touchStreamSource</span> <span class="o">=</span> <span class="nx">touchDrawStreamSource</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#canvas&#39;</span><span class="p">));</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">strokeStreamSource</span> <span class="o">=</span> <span class="nx">mouseStreamSource</span><span class="p">.</span><span class="nx">merge</span><span class="p">(</span><span class="nx">touchStreamSource</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>strokeStreamSource は、描画に必要な情報のみ提供していて、マウスとかタッチのことはうまく隠蔽されているのがわかると思います。</p>

<h4>ペンの設定と描画処理</h4>

<p>sample.js:L61-71 次に、色と太さをProperty(状態を持ったイベントストリーム) として定義します<br/>
option の値を、太さは数値、色はrgb値の文字列に値を変換しています。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="c1">// 太さ</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">sizeProperty</span> <span class="o">=</span> <span class="nx">Bacon</span><span class="p">.</span><span class="nx">UI</span><span class="p">.</span><span class="nx">optionValue</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;[name=size]&#39;</span><span class="p">),</span> <span class="s1">&#39;2&#39;</span><span class="p">).</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">val</span><span class="p">){</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">val</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 色</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">colorProperty</span> <span class="o">=</span> <span class="nx">Bacon</span><span class="p">.</span><span class="nx">UI</span><span class="p">.</span><span class="nx">optionValue</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;[name=color]&#39;</span><span class="p">),</span> <span class="s1">&#39;red&#39;</span><span class="p">).</span><span class="nx">decode</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">red</span> <span class="o">:</span> <span class="s1">&#39;rgb(255, 0, 0)&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">green</span> <span class="o">:</span> <span class="s1">&#39;rgb(0, 255, 0)&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">blue</span><span class="o">:</span> <span class="s1">&#39;rgb(0, 0, 255)&#39;</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">options</span> <span class="o">=</span> <span class="nx">Bacon</span><span class="p">.</span><span class="nx">combineTemplate</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">size</span> <span class="o">:</span> <span class="nx">sizeProperty</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">color</span> <span class="o">:</span> <span class="nx">colorProperty</span>
</span><span class='line'>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>最後に色、太さの設定情報とx,y座標のストリームを使って、描画処理を書きます。<br/>
描画が発生したときに、設定の値を取得しています。</p>

<p>L78-105</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="c1">// 描画</span>
</span><span class='line'>  <span class="nx">options</span><span class="p">.</span><span class="nx">sampledBy</span><span class="p">(</span><span class="nx">strokeStreamSource</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">options</span><span class="p">,</span> <span class="nx">stream</span><span class="p">){</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span> <span class="nx">options</span> <span class="o">:</span> <span class="nx">options</span><span class="p">,</span> <span class="nx">stream</span> <span class="o">:</span> <span class="nx">stream</span> <span class="p">};</span>
</span><span class='line'>  <span class="p">}).</span><span class="nx">onValue</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">args</span><span class="p">){</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">options</span> <span class="o">=</span> <span class="nx">args</span><span class="p">.</span><span class="nx">options</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">stream</span> <span class="o">=</span> <span class="nx">args</span><span class="p">.</span><span class="nx">stream</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 2点の組みで返すストリーム</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">pointSetStream</span> <span class="o">=</span> <span class="nx">stream</span><span class="p">.</span><span class="nx">slidingWindow</span><span class="p">(</span><span class="mi">2</span><span class="p">).</span><span class="nx">filter</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">points</span><span class="p">){</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">points</span><span class="p">.</span><span class="nx">length</span> <span class="o">==</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}).</span><span class="nx">filter</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">points</span><span class="p">){</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">fromPoint</span> <span class="o">=</span> <span class="nx">points</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="nx">toPoint</span> <span class="o">=</span> <span class="nx">points</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>      <span class="k">return</span> <span class="p">(</span><span class="nx">fromPoint</span><span class="p">.</span><span class="nx">x</span> <span class="o">&lt;</span> <span class="nx">canvas</span><span class="p">.</span><span class="nx">width</span> <span class="o">&amp;&amp;</span> <span class="nx">fromPoint</span><span class="p">.</span><span class="nx">y</span> <span class="o">&lt;</span> <span class="nx">canvas</span><span class="p">.</span><span class="nx">height</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>        <span class="p">(</span><span class="nx">toPoint</span><span class="p">.</span><span class="nx">x</span> <span class="o">&lt;</span> <span class="nx">canvas</span><span class="p">.</span><span class="nx">width</span> <span class="o">&amp;&amp;</span> <span class="nx">toPoint</span><span class="p">.</span><span class="nx">y</span> <span class="o">&lt;</span> <span class="nx">canvas</span><span class="p">.</span><span class="nx">height</span><span class="p">)</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">pointSetStream</span><span class="p">.</span><span class="nx">onValue</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">points</span><span class="p">){</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">fromPoint</span> <span class="o">=</span> <span class="nx">points</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="nx">toPoint</span> <span class="o">=</span> <span class="nx">points</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">ctx</span><span class="p">.</span><span class="nx">strokeStyle</span> <span class="o">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">color</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">ctx</span><span class="p">.</span><span class="nx">lineWidth</span> <span class="o">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">size</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">ctx</span><span class="p">.</span><span class="nx">beginPath</span><span class="p">();</span>
</span><span class='line'>      <span class="nx">ctx</span><span class="p">.</span><span class="nx">moveTo</span><span class="p">(</span><span class="nx">fromPoint</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span> <span class="nx">fromPoint</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">ctx</span><span class="p">.</span><span class="nx">lineTo</span><span class="p">(</span><span class="nx">toPoint</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span> <span class="nx">toPoint</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">ctx</span><span class="p">.</span><span class="nx">stroke</span><span class="p">();</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h4>サンプルコードのまとめ</h4>

<p>イベントの流れを抽象化することで、様々な入力に容易に対応できるコードにすることができました。<br/>
入力を増やすには、他のイベントから座標の流れのイベントに変換すれば良いので</p>

<ul>
<li>Webソケットを使ってリアルタイムにサーバーから送られてくる座標を描画</li>
<li>保存されたお絵かきを再生</li>
</ul>


<p>なども描画処理を変えることなく実装できそうです。
出力についても、描画した線をベジェ曲線に近似させる、といったことも入力とは独立して実装することができます。</p>

<h3>bacon.js を使ってみて</h3>

<p>今回は、簡単なお絵かきツールの実装に沿ってbacon.jsを使ってみましたが、なかなか良さそうです。</p>

<p>イベントの捉え方を根本的に変えないといけないので、チーム開発でのメンテ性などを考えるとアプリ全体をbacon.jsを使って書くのはまだ厳しい気もします。<br/>
パーツ単位で、特に今回のようなお絵かきやソケット通信などのイベントが主役の部分については、うまく抽象化できて可読性、メンテ性の高いコードが書けるなという印象をうけました。</p>

<p>面白いので、みなさんもぜひ使ってみてください。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WiMAX接続のMacのMAMP環境でメールが送信できない]]></title>
    <link href="http://blog.wacul.co.jp//blog/2014/03/10/mamp_wimax/"/>
    <updated>2014-03-10T13:50:00+09:00</updated>
    <id>http://blog.wacul.co.jp//blog/2014/03/10/mamp_wimax</id>
    <content type="html"><![CDATA[<h3>事件</h3>

<p>WiMAXで接続し、MacでMAMPを立ち上げ、PHPからmb_send_mailを実行したところ、宛先にメールが届かない。
その後、別のインターネット環境に接続したところ、今まで送信しようとしたメールが一斉に届いた。</p>

<h3>原因</h3>

<p>多くのプロバイダはOutbound Port25 Blocking をしており、メール送信に25番ポートを利用することができない。
利用していたUQ WiMAXもその制限があった。
送ることができなかったメールはMacで標準に搭載されているpostfixのキューに溜まる。</p>

<h3>解決方法</h3>

<p>gmailのサーバへリレーして送信する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; sudo vim /etc/postfix/main.cf
</span><span class='line'>
</span><span class='line'>relayhost = [smtp.gmail.com]:587
</span><span class='line'>smtp_use_tls = yes
</span><span class='line'>smtp_sasl_auth_enable = yes
</span><span class='line'>smtp_sasl_password_maps = hash:/etc/postfix/sasl_passwd
</span><span class='line'>smtp_sasl_tls_security_options = noanonymous</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; sudo vim /etc/postfix/sasl_passwd
</span><span class='line'>
</span><span class='line'>[smtp.gmail.com]:587    example@wacul.co.jp:password
</span><span class='line'>
</span><span class='line'>&gt; sudo postmap /etc/postfix/sasl_passwd
</span><span class='line'>&gt; sudo /etc/init.d/postfix start
</span></code></pre></td></tr></table></div></figure>


<p>これでオッケー！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ワカルプログラマチームのブログスタート]]></title>
    <link href="http://blog.wacul.co.jp//blog/2014/03/08/first-post/"/>
    <updated>2014-03-08T20:05:00+09:00</updated>
    <id>http://blog.wacul.co.jp//blog/2014/03/08/first-post</id>
    <content type="html"><![CDATA[<p>はじめまして、ワカルプログラマチームのtutumingといいます。<br/>
パン作りが趣味です。</p>

<p><a href="http://wacul.co.jp">株式会社ワカル</a> は、WebサイトのUI改善提案から制作、アプリの開発などまで、幅広く手がけている会社です。</p>

<p>プログラマチームはまだ３人ですが、少しずつ情報を発信して、皆様(特に技術者の方々)にワカルについて少しでも興味をもっていただければと思い、ブログを始めることにしました。</p>

<p>まだまだ規模も小さく青いですが、それぞれに芯を持った個性的なメンバーが揃っているチームです。</p>

<p>日常の仕事の中でのTipsや、知見などを公開していく場にしたいと思っていますので、どうぞよろしくお願いします。</p>
]]></content>
  </entry>
  
</feed>
