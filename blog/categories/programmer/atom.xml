<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programmer | The Wacul Blog]]></title>
  <link href="http://blog.wacul.co.jp/blog/categories/programmer/atom.xml" rel="self"/>
  <link href="http://blog.wacul.co.jp/"/>
  <updated>2015-07-24T10:20:44+09:00</updated>
  <id>http://blog.wacul.co.jp/</id>
  <author>
    <name><![CDATA[WACUL INC.]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[wacul技術ブログはQiita Organizationに投稿することになりました]]></title>
    <link href="http://blog.wacul.co.jp/blog/2015/07/24/qiita/"/>
    <updated>2015-07-24T00:00:00+09:00</updated>
    <id>http://blog.wacul.co.jp/blog/2015/07/24/qiita</id>
    <content type="html"><![CDATA[<p>今後、本wacul技術ブログはQiita Organizationに投稿します。<br/>
技術情報の発信は以下のページより行っていきますので、どうぞよろしくお願い致します。<br/>
<a href="http://qiita.com/organizations/wacul">株式会社wacul の Qiita Organizationページ</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJSで全てのng-clickに2重クリック防止機能を付ける]]></title>
    <link href="http://blog.wacul.co.jp/blog/2015/02/17/ngclick_waits_promise/"/>
    <updated>2015-02-17T00:00:00+09:00</updated>
    <id>http://blog.wacul.co.jp/blog/2015/02/17/ngclick_waits_promise</id>
    <content type="html"><![CDATA[<h2>概要</h2>

<p>Angularの標準のdirectiveである<code>ng-click</code>に、返り値がpromiseの場合に解決されるまでクリックを防止する機能を付けてみました
(<a href="http://embed.plnkr.co/C3vvQdUmTVp3nTXYLdFD/preview">ボタンを押したら1秒間クリックが無効化されるデモ</a>)。
とても簡単に実装できるのでちょっと紹介してみます。</p>

<h2>実装</h2>

<p>とりあえず元の実装を見てみましょう(<a href="https://github.com/angular/angular.js/blob/e057a9aa398ead209bd6bbf76e22d2d5562904fb/src/ng/directive/ngEventDirs.js#L44-L77">githubのソース</a>)。</p>

<p>```js
// 以下compile部分のみ抜き出し
compile: function($element, attr) {
  // 具体的なdirectiveNameは"ngClick"でng-click=&ldquo;hoge()"のhoge()部分を関数としてパースする
  var fn = $parse(attr[directiveName], /<em> interceptorFn </em>/ null, /<em> expensiveChecks </em>/ true);
  return function ngEventHandler(scope, element) {</p>

<pre><code>// 具体的なeventNameは"click"
element.on(eventName, function(event) {
  var callback = function() {
    fn(scope, {$event:event});
  };
  // クリックしたら単純に関数を実行してDOMに反映させる
  if (forceAsyncEvents[eventName] &amp;&amp; $rootScope.$$phase) {
    scope.$evalAsync(callback);
  } else {
    scope.$apply(callback);
  }
});
</code></pre>

<p>  };
}
```</p>

<p>元の実装は単純にクリックイベントをハンドリングして登録された関数を実行して、DOMに反映するだけです。
これを<code>$provide.decorator</code>を使用して実装を置き換えます。</p>

<p>```js
angular.module(&lsquo;foo&rsquo;, [])
.config(function($provide) {
  // directiveを置き換える場合はdirective名の末尾に"Directive"を付ける
  $provide.decorator(&lsquo;ngClickDirective&rsquo;, function($delegate, $parse, $q) {</p>

<pre><code>// $delegate[0]がdirective本体
$delegate[0].compile = function($element, attr) {
  var fn = $parse(attr.ngClick, null, true);

  return function(scope, element) {
    element.on('click', function(event) {
      var result, promise, d;
      // el.disabled==trueのときにはクリック無効(disabledが使えない要素用の保険)
      if (element[0].disabled) return;
      result = fn(scope, {$event: event});
      // promiseの場合は解決を待つ
      if (result != null &amp;&amp; typeof result.then === 'function') {
        promise = result;
      } else {
        d = $q.defer();
        d.resolve();
        promise = d.promise;
      }
      // promise解決までクリックを無効化して、解決したら有効化する
      element[0].disabled = true;
      function enable() {
        element[0].disabled = false;
      }
      promise.then(enable, enable);
    });
  };
};
return $delegate;
</code></pre>

<p>  });
})
```</p>

<p>登録された関数の返り値がpromiseの場合は解決するまで要素の<code>disalbed</code>プロパティを<code>true</code>にしておいて、
解決されたら<code>disabled</code>プロパティを<code>false</code>に戻します。
関数の返り値がpromiseでなくても解決済みのpromiseとしておくと統一的に扱えて便利です(ついでにDOMへの反映も自動でやってくれる!)。</p>

<p>これで、いままでの<code>ng-click</code>の部分を変更せずにクリック連打を防止することができます
(もちろん、モジュールを読み込む必要はあります)。</p>

<p><code>js
angular.moduel('bar', ['foo']).controller('Ctrl', function() {...});
</code></p>

<h2>まとめ</h2>

<p>ちょっと黒魔術っぽいんですが、<code>ng-click</code>の実装を置き換えてボタン連打防止機能を付けたらとても便利だったので紹介しました。</p>

<h2>参考</h2>

<ul>
<li><a href="http://angular-tips.com/blog/2013/09/experiment-decorating-directives/">Experiment: decorating directives &ndash; Angular Tips</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Markdownを簡単にリアルタイムに共有するShare!をリリースしました]]></title>
    <link href="http://blog.wacul.co.jp/blog/2015/02/11/share/"/>
    <updated>2015-02-11T19:00:00+09:00</updated>
    <id>http://blog.wacul.co.jp/blog/2015/02/11/share</id>
    <content type="html"><![CDATA[<h2>はじめに</h2>

<p>最近、株式会社waculでは月に1度に開発合宿と称し、プログラマチームで業務とは別の開発を行っています。
今回ご紹介させていただく<a href="http://shareapp.wacul.jp">Share!</a>は1月、2月の開発合宿で実装したアプリケーションです。</p>

<h2>Share!とは</h2>

<p>ミーティング中に書いている議事録を参加者全体に共有したいケースがよくありました。
今までそういったケースではGoogleドライブのドキュメントを作成し、そこで共有していました。
しかし、ドキュメントでは以下のような問題がありました。</p>

<ul>
<li>普段使っているエディタを使えない</li>
<li>スタイルを整えるのが手間</li>
<li>ドキュメントを作って共有するというステップが面倒</li>
</ul>


<p>そこで我々はこれらを解決するため、ローカルで作成したMarkdown形式のテキストファイルを簡単にリアルタイムに共有するアプリケーションの開発を行いました。</p>

<h2>Share!の動作</h2>

<p>テキストを共有する側は専用のアプリケーションをダウンロードする必要があります。
アプリケーションを起動すると、以下のような画面が表示されるので、ここにテキストファイルをドラッグアンドドロップします。</p>

<p><img src="http://blog.wacul.co.jp/images/2015-02-11-share/dragdrop.png" alt="share drag and drop" /></p>

<p>そうすると、ブラウザが自動的に立ち上がり、ドラッグアンドドロップしたファイルが表示されます。</p>

<p><img src="http://blog.wacul.co.jp/images/2015-02-11-share/browser.png" alt="share browser" /></p>

<p>このとき、ユニークなランダムなURLが割り振られるので、このURLを共有したい相手に伝えます。
共有された側は共同編集を行うことはできませんが、リアルタイムに共有した側の編集状況を見ることができます。</p>

<h2>Download</h2>

<p>アプリケーションは以下からダウンロードできます。</p>

<ul>
<li>Windows版 <a href="/zip/2015-02-11-share/share-win64.zip">Download</a></li>
<li>Mac版 <a href="/zip/2015-02-11-share/share-osx64.zip">Download</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyMotion で 64bit アプリに対応する]]></title>
    <link href="http://blog.wacul.co.jp/blog/2014/12/17/rubymotion-64bit/"/>
    <updated>2014-12-17T17:40:00+09:00</updated>
    <id>http://blog.wacul.co.jp/blog/2014/12/17/rubymotion-64bit</id>
    <content type="html"><![CDATA[<p>こんにちは。すっかりRubyMotionでのiOSアプリ開発にどっぷりのkyohです。
最近の趣味はダイエットですが、なかなか成果が出ません。:(</p>

<h2>急に 64bit が来たので</h2>

<p>世の中、だいぶ64bit環境が普及してきたこともあり、
Appleは2015年2月から、新しいアプリの申請（更新含む）において64bit対応したアプリのみを受け付けるようになります。</p>

<p><a href="https://developer.apple.com/news/?id=10202014a">64-bit and iOS 8 Requirements for New Apps</a></p>

<p>これに合わせ、弊社サービスの「<a href="http://clulu.com/">Clulu</a>」も64bit対応を行いました。</p>

<p>およその32bit &ndash; 64bit間の差異はRubyMotionが吸収してくれる（便利！）のですが、
どうしたって一部はソース上での対応が必要です。
その最中、思わぬところで躓き、親切にもRubyMotionのContributorの方に丁寧に教えていただけたので、
簡単な解説でも書いてみようと思います。</p>

<h2>64bit対応① まずはターゲットを追加する！</h2>

<p>何はともあれ、ビルドターゲットに64bit環境を追加します。
RubyMotionの場合、Rakefileで次のように指定するだけです。</p>

<p><code>ruby
app.archs['iPhoneOS'] &lt;&lt; 'arm64'
app.archs['iPhoneSimulator'] &lt;&lt; 'x86_64'
</code></p>

<p>これで</p>

<p><code>bash
rake clean
rake
</code></p>

<p>とすれば、ターゲットが追加されます。</p>

<h3>ところがどっこい。</h3>

<p>RubyMotion 2.38 までで開発ターゲットをiPadにしている場合、
<strong> iOS Simulatorが64bitモードで起動しない </strong>
というバグがありました。</p>

<p>どうやら、<code>app.archs['iPhoneSimulator'] &lt;&lt; 'x86_64'</code> としても、<code>app.archs</code> 内に <code>x86</code> が入っている限り、iOS Simulator が32bitモードで起動してしまうようです。</p>

<p>困り果ててTwitterで呟いたところ、RubyMotionのContributorの方が丁寧に教えてくれました。</p>

<blockquote class="twitter-tweet" data-conversation="none" lang="ja"><p><a href="https://twitter.com/kyoh86">@kyoh86</a> iPhoneアプリでx86_64が含まれていればシミュレータが64bitで起動するのですが、iPadでは違うということを確認しました。調査してみます。</p>&mdash; watson (@watson1978) <a href="https://twitter.com/watson1978/status/540677981249622016">2014, 12月 5</a></blockquote>


<script async src="http://blog.wacul.co.jp//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>そのため、iOS Simulatorの起動を64bitモードで起動するために環境変数の指定を追加する必要があります。</p>

<blockquote class="twitter-tweet" data-conversation="none" lang="ja"><p><a href="https://twitter.com/kyoh86">@kyoh86</a> Rakefileに&#10;ENV[‘device_name’] = ‘iPad Air’&#10;を追加する方が良かったかも。</p>&mdash; watson (@watson1978) <a href="https://twitter.com/watson1978/status/540691881256964096">2014, 12月 5</a></blockquote>


<script async src="http://blog.wacul.co.jp//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p><code>ruby
app.archs['iPhoneOS'] &lt;&lt; 'arm64'
app.archs['iPhoneSimulator'] &lt;&lt; 'x86_64'
ENV['device_name'] = 'iPad Air'
</code></p>

<p>ただし、この不具合は最新のRubyMotion 3.0では（<a href="https://twitter.com/watson1978">@watson1978</a>さんの修正により）
Fixされているようです。</p>

<h2>64bit対応② ポインタを使用している箇所で不具合が起きないか確認する</h2>

<p>今回私が直面したのは、UIGraphics/CGContext でポインタを使った処理でのこと。</p>

<p>```ruby</p>

<h1>点線を引く！</h1>

<p>context = UIGraphicsGetCurrentContext()
UIColor.blackColor.setStroke
CGContextSetLineWidth(context, 1)
lengths = Pointer.new(:float, 2) # :float
lengths[0] = 2
lengths[1] = 1
CGContextSetLineDash(context, 0.0, lengths, 2)</p>

<p>CGContextMoveToPoint(context, 100, 100)
CGContextAddLineToPoint(context, 200, 200)
CGContextStrokePath(context)
```</p>

<p>CGFloatは、32bit環境では32bit小数点数、64bit環境では64bit小数点数となっているため、
64bit環境でこいつを動かすと、<code>CGContextSetLineDash(context, 0.0, lengths, 2)</code> のところでコケます。</p>

<p>64bit環境に対応するためには、Pointerが指すオブジェクトの型をdoubleにしてやる必要があります。</p>

<p><code>
lengths = Pointer.new(:double, 2) # :double
</code></p>

<p>どうしても64bitと32bitを両立させたい！という場合（そんなのあるのか？）は、この両者を並立させることもできます。
こちらも件の@watson1978さんから情報をいただきました。</p>

<blockquote class="twitter-tweet" data-conversation="none" lang="ja"><p><a href="https://twitter.com/kyoh86">@kyoh86</a> CGFloatは32bitと64bitでサイズが違うので <a href="https://t.co/dR2f0SdKAw">https://t.co/dR2f0SdKAw</a> みたいな感じで切り分けて適切な型でPointerを作ってください。</p>&mdash; watson (@watson1978) <a href="https://twitter.com/watson1978/status/540488987203235840">2014, 12月 4</a></blockquote>


<script async src="http://blog.wacul.co.jp//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>つまり、先の例で言えば</p>

<p><code>ruby
CGFloat_Type = CGSize.type[/(f|d)/]
lengths = Pointer.new(CGFloat_Type, 2) # :float/:double
</code></p>

<p>こんな感じですね。</p>

<h2>さいごに</h2>

<p>RubyMotionでの64bit環境対応はそう難しくはありません。
今回のような事態に巻き込まれることも極稀にあるようですが・・・。
Appleの設けた来年2月までの期限に向けて、早々に取り掛かってみるのも悪く無いと思います。</p>

<p>ともあれ、今回のトラブルで丁寧にご対応くださった上、この記事への引用をご了承くださった
<a href="https://twitter.com/watson1978/">@watson1978</a>様には厚く御礼申し上げます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sublime Text, Atomで使えるAngularJSプラグインを作りました]]></title>
    <link href="http://blog.wacul.co.jp/blog/2014/11/12/angular-plugin-for-sublime-and-atom-users/"/>
    <updated>2014-11-12T19:25:00+09:00</updated>
    <id>http://blog.wacul.co.jp/blog/2014/11/12/angular-plugin-for-sublime-and-atom-users</id>
    <content type="html"><![CDATA[<p>CoffeeScriptでAngularJSを書いている開発者、特にSublime TextやAtomを使っている人向けのプラグインを作ったので紹介します。</p>

<h2>どんなプラグイン？</h2>

<p>このプラグインは <strong>インラインテンプレートのハイライト機能</strong>を提供します(ちょっとしたスニペットもあります)。
WebStormのLanguage Injection(図2)や、Github Flavored Markdownのコード部分がハイライトされるアレの簡易版です。</p>

<p><a href="/images/2014-11-12-angular-plugin-for-sublime-atom-users/sublime.gif"><img src="/images/2014-11-12-angular-plugin-for-sublime-atom-users/sublime.gif" alt="sublime sample" /></a><br>
Sublime Textでのプラグイン動作例(テンプレート内での補完は<a href="https://github.com/angular-ui/AngularJS-sublime-package">angular-ui/AngularJS-sublime-package</a>が使われています)</p>

<p><a href="/images/2014-11-12-angular-plugin-for-sublime-atom-users/webstorm.gif"><img src="/images/2014-11-12-angular-plugin-for-sublime-atom-users/webstorm.gif" alt="webstorm sample" /></a><br>
WebStromのLanguage Injection動作例</p>

<h2>インストール</h2>

<h3>Sublime Text</h3>

<p>Package Installから <code>CoffeeAngular Syntax</code> を検索してインストールします。</p>

<p><a href="/images/2014-11-12-angular-plugin-for-sublime-atom-users/sublime_install.gif"><img src="/images/2014-11-12-angular-plugin-for-sublime-atom-users/sublime_install.gif" alt="sublime install sample" /></a></p>

<h3>Atom</h3>

<p>設定画面から <code>Language Coffee Script Angular</code> を検索してインストールするか、ターミナルから<code>apm install language-coffee-script-angular</code>して下さい。</p>

<p><a href="/images/2014-11-12-angular-plugin-for-sublime-atom-users/atom_install.png"><img src="/images/2014-11-12-angular-plugin-for-sublime-atom-users/atom_install.png" alt="atom install sample" /></a></p>

<h2>使い方(共通)</h2>

<p>言語モードにCoffeeScript (Angular.js)が追加されているのでそれを選択します。
すると以下図のようなコードのテンプレート部分がハイライトされます。</p>

<p><a href="/images/2014-11-12-angular-plugin-for-sublime-atom-users/run.gif"><img src="/images/2014-11-12-angular-plugin-for-sublime-atom-users/run.gif" alt="run plugin" /></a></p>

<h2>まとめ</h2>

<p>Sublime TextとAtom用のCoffeeScript+AngularJSプラグインを作りました。
結構ユーザ層が限定的ではありますがCoffeeでAngularな人は是非使ってみてください。</p>

<h2>レポジトリ</h2>

<ul>
<li><a href="https://github.com/ukyo/CoffeeAngular.tmLanguage">github.com/ukyo/CoffeeAngular.tmLanguage(Sublime)</a></li>
<li><a href="https://github.com/ukyo/language-coffee-script">github.com/ukyo/language-coffee-script(Atom)</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
